upper <- means[i]+c*SE
print(toString(c(round(lower, 5), round(upper, 5))))
}
for (i in 5:7) {
c <- qtukey(0.95, 2, 47)
lower <- means[i]-c*SE
upper <- means[i]+c*SE
print(toString(c(round(lower, 5), round(upper, 5))))
}
for (i in 11) {
c <- qtukey(0.95, 2, 47)
lower <- means[i]-c*SE
upper <- means[i]+c*SE
print(toString(c(round(lower, 5), round(upper, 5))))
}
means
means <- means*2
means
for (i in 1:3) {
c <- qtukey(0.95, dfA[i], 47)
lower <- means[i]-c*SE
upper <- means[i]+c*SE
print(toString(c(round(lower, 5), round(upper, 5))))
}
for (i in 5:7) {
c <- qtukey(0.95, 2, 47)
lower <- means[i]-c*SE
upper <- means[i]+c*SE
print(toString(c(round(lower, 5), round(upper, 5))))
}
for (i in 11) {
c <- qtukey(0.95, 2, 47)
lower <- means[i]-c*SE
upper <- means[i]+c*SE
print(toString(c(round(lower, 5), round(upper, 5))))
}
qtukey(0.95, 2, 47)
SE
means[1]
rm(list=ls())
#Read in both data tables
#data from sheet 2
df= read.csv("~/Downloads/Data.csv")
data = df
#data from sheet 1
data2 = read.csv('~/Downloads/Data2.csv')
data2 = data2[-1]
#change col names
names(data)[1] = 'y'
names(data)[2]= 'Weight'
names(data)[3]= 'Clip'
names(data)[4]= 'Length'
names(data)[5] = 'Width'
#y is average response used for plots
y=data2$Average
#get appropriate rows from data2
Pwidth <- y[c(1,2,3,4,9,10,11,12)]
Nwidth <- y[c(5,6,7,8,13,14,15,16)]
Pweight <- y[c(9,10,11,12,13,14,15,16)]
Nweight <- y[c(1,2,3,4,5,6,7,8)]
Pbody <- y[c(1,2,7,8,9,10,15,16)]
Nbody <- y[c(3,4,5,6,11,12,13,14)]
Pclip <- y[c(1,3,5,7,9,11,13,15)]
Nclip <- y[c(2,4,6,8,10,12,14,16)]
#initial box plots
width_plot <- boxplot(Pwidth,Nwidth, names=c('1 - Wide', '0 - Narrow'))
title(main = "Box Plot for Wing Width",  ylab = "Flight Time(s)")
weight_plot <- boxplot(Pweight, Nweight,names=c('1 - Heavy', '0 - Light'))
title(main = "Box Plot for Paper Weight", ylab = "Flight Time(s)")
body_plot <- boxplot(Pbody, Nbody,names=c('1 - Long', '0 - Short'))
title(main = "Box Plot for Body Length", ylab = "Flight Time(s)")
clip_plot <- boxplot(Pclip, Nclip,names=c('1 - Paperclip', '0 - No Paperclip'))
title(main = "Box Plot for Paperclip", ylab = "Flight Time(s)")
#interaction plots
weight_clip <- interaction.plot(data2$Weight,data2$Clip,y,type="b", col=c("red","blue"), legend=F,
lty=c(2,1), lwd=2, pch=c(18,24),
xlab="Paper Weight Level (0 - Light, 1- Heavy)",
ylab="Avg. Flight Time (s)",
main="Interaction Plot for Body Weight x Paperclip")
legend("topright", c("0 - No Paperclip","1 - Paperclip"),
bty="n",lty=c(1,2),lwd=2,pch=c(18,24),
col=c("red","blue"), title="Legend (Paperclip)",inset = .02)
weight_width <-interaction.plot(data2$Weight,data2$Width,y,type="b", col=c("red","blue"), legend=F,
lty=c(2,1), lwd=2, pch=c(18,24),
xlab="Paper Weight Level (0 - Light, 1- Heavy)",
ylab="Avg. Flight Time (s)",
main="Interaction Plot for Paper Weight x Wing Width")
legend("topright", c("0 - Narrow","1 - Wide"),
bty="n",lty=c(1,2),lwd=2,pch=c(18,24),
col=c("red","blue"), title="Legend (Wing Width)",inset = .02)
weight_body <- interaction.plot(data2$Weight,data2$Length, y, type="b", col=c("red","blue"), legend=F,
lty=c(2,1), lwd=2, pch=c(18,24),
xlab="Paper Weight Level (0 - Light, 1- Heavy)",
ylab="Avg. Flight Time (s)",
main="Interaction Plot for Paper Weight x Body Length")
legend("topright", c("0 - Short","1 - Long"),
bty="n",lty=c(1,2),lwd=2,pch=c(18,24),
col=c("red","blue"), title="Legend (Body Length)",inset = .02)
body_clip <- interaction.plot(data2$Length,data2$Clip,y ,type="b", col=c("red","blue"), legend=F,
lty=c(2,1), lwd=2, pch=c(18,24),
xlab="Body Length Level (0 - Short, 1- Long)",
ylab="Avg. Flight Time (s)",
main="Interaction Plot for Body Length x Paperclip")
legend("right", c("0 - No Paperclip","1 - Paperclip"),
bty="n",lty=c(1,2),lwd=2,pch=c(18,24),
col=c("red","blue"), title="Legend (Paperclip)",inset = .02)
body_width <- interaction.plot(data2$Length,data2$Width,y, type="b", col=c("red","blue"), legend=F,
lty=c(2,1), lwd=2, pch=c(18,24),
xlab="Body Length Level (0 - Short, 1- Long)",
ylab="Avg. Flight Time (s)",
main="Interaction Plot for Body Length x Wing Width")
legend("bottomright", c("0 - Narrow","1 - Wide"),
bty="n",lty=c(1,2),lwd=2,pch=c(18,24),
col=c("red","blue"), title="Legend (Wing Width)",inset = .02)
width_clip <- interaction.plot(data2$Width,data2$Clip,y, type="b", col=c("red","blue"), legend=F,
lty=c(2,1), lwd=2, pch=c(18,24),
xlab="Wing Width Level (0 - Narrow, 1- Wide)",
ylab="Avg. Flight Time (s)",
main="Interaction Plot for Body Length x Paperclip")
legend("right", c("0 - No Paperclip","1 - Paperclip"),
bty="n",lty=c(1,2),lwd=2,pch=c(18,24),
col=c("red","blue"), title="Legend (Paper Clip)",inset = .02)
#ANOVA model
fit <- lm(data$y ~ data$Weight*data$Clip*data$Length*data$Width)
anova_result <- anova(fit)
anova_result
#Get qq plot
plot(fit)
redid_fit <- plot(data$y,fit$residuals,  xlab= "Avg. Flight Time (s)",
ylab="Fitted Residuals",
main="Residual Plot for Avg. Flight Time")
abline(0,0)
weight_resid <- plot(data$Weight,fit$residuals,  xlab= "Paper Weight",
ylab="Fitted Residuals",
main="Residual Plot for Weight")
abline(0,0)
clip_reid <- plot(data$Clip, fit$residuals,  xlab= "Paperclip",
ylab="Fitted Residuals",
main="Residual Plot for Paperclip")
abline(0,0)
length_resid <- plot(data$Length, fit$residuals,  xlab= "Body Length",
ylab="Fitted Residuals",
main="Residual Plot for Body Length")
abline(0,0)
width_resid <- plot(data$Width, fit$residuals,  xlab= "Wing Width",
ylab="Fitted Residuals",
main="Residual Plot for Wing Width")
abline(0,0)
fit$coefficients
# SE <- sqrt(0.0475)/sqrt(64)
# SE <- sqrt(0.0475/16)
# c <- qtukey(0.95, 4, 60)/sqrt(2)
for (i in fit$coefficients) {
print(toString(c(round(i-c*SE, 5), round(i+c*SE, 5))))
}
SE
c*SE
means <- fit$coefficients[2:16]
means <- means*2
means
MSE <- anova_result$`Mean Sq`[16]
# dfA <- c(2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 8, 8, 8, 8, 16)
dfA <- c(2, 2, 2, 2)
n <-   c(8, 8, 8, 8)
SE <- sqrt(MSE)/sqrt(64)
SE
for (i in 1:3) {
c <- qtukey(0.95, dfA[i], 47)
lower <- means[i]-c*SE
upper <- means[i]+c*SE
print(toString(c(round(lower, 5), round(upper, 5))))
}
for (i in 5:7) {
c <- qtukey(0.95, 2, 47)
lower <- means[i]-c*SE
upper <- means[i]+c*SE
print(toString(c(round(lower, 5), round(upper, 5))))
}
for (i in 11) {
c <- qtukey(0.95, 2, 47)
lower <- means[i]-c*SE
upper <- means[i]+c*SE
print(toString(c(round(lower, 5), round(upper, 5))))
}
fit$coefficients
rm(list=ls())
A <- matrix(c(1, -2, 0, 1, -2, -1, 1, 1, -1), nrow = 3, ncol = 3)
A
y <- c(2, 0, 0)
x <- c(0, 4, 0)
c <- c(1, 2, 1)
b <- c(4, -1, -2)
w <- t(A)%*%y - c
w
a1 <- A[1, :]
a1 <- A[1,]
cstar <- y[1]*a1-w
cstar
t(A)
A*x
v <- b - A*x
v
v <- b - A*t(x)
v <- b - A%*%x
v
t(A)%*%y
w
rm(list=ls())
A <- matrix(c(3/2, 1/2, 0, 1, 1, 1), nrow = 2, ncol = 3)
A
solve(A)
rref(A)
library(pracma)
rref(A)
b <- rref(A)[,3]
rm(b)
u <- rref(A)[,3]
B <- matrix(c(1, 0, 1, 2, u), nrow = 2, ncol = 3)
y <- rref(B)[,3]
A
u2 <- c(1/3, 1)
u2
u2 <- t(c(1/3, 1))
u2 <- t(c(1/3, 1))
us
u2
u2 <- c(1/3, 1)
rm(list=ls())
A = matrix(c(1,0,0,0,1,0,1,1,-2,0,4,5), nrow = 3, ncol = 4)
A
library(pracma)
rref(A)
cB = c(0,0,3)
B1 = matrix(c(1,0,0,0,1,0,1,1,-2), nrow = 3, ncol = 3)
inv(B1)
t(cb)*inv(B1)
t(cB)*inv(B1)
cB*inv(B1)
A = matrix(c(1,1,0,3,0,1,0,-1,0,-2,1,2), nrow = 3, ncol = 4, byrow = T)
A
rref(A)
B = matrix(c(1,0,0,0,0,1,0,0,2,1,1,2,0,0,0,1), nrow = 4, ncol = 4)
B
c(0,0,3,0)%*%B
C = matrix(c(1,0,2,0,1,0,1,1,0,2,0,0,1,0,-1,0,0,2,1,0), nrow = 4, ncol = 5, byrow = T)
C
rref(C)
A = matrix(c(3,3,-1,2,0,1,0,0,0,0,1,0,0,0,0,1), nrow = 4, ncol = 4)
inv(A)
c(2,0,3,0)%*%inv(A)
b <- c(2,0,3,0)%*%inv(A)
b*A
t(b)*A
b%*%A
B =matrix(c(1,0,0,0,0,1,0,0,2,1,1,2,0,0,0,1), nrow = 4, ncol = 4)
u <- b%*%A
u%*%inv(B)
B
c(2,0,3,-3/2)%*%inv(B)
C=matrix(c(1,0,0,0,0,1,0,0,0,0,1,0,2,1,1,2,1,2,-1,0), nrow = 4, ncol = 5)
rref(C)
C
B2 = matrix(c(1,1,0,2,0,2,0,1,0,-1,1,1,0,0,0,2), nrow = 4, ncol = 4, byrow = T)
B2
c(0,2,0,3)%*%inv(B2)
B1 = matrix(c(1,0,0,2,0,1,0,1,0,0,1,1,0,0,0,2), nrow = 4, ncol = 4, byrow = T)
B1
c(0,2,4,3)%*%inv(B1)
B = matrix(c(1,2,-2,-1,1,2,1,0,0), nrow = 3, ncol = 3)
B
inv(B)
N = matrix(c(2,3,4,0,1,0,0,0,1), nrow = 3, ncol = 3)
inv(B)*N
c(-1,2,0)%*%inv(B)%*%N
require(devtools)
install_version("randomForest", version = "4.6-12")
remove.packages("randomForest", lib="~/Library/R/3.4/library")
install_version("randomForest", version = "4.6-12")
library(randomForest)
install.packages("~/Downloads/randomForest_4.6-12.tar.gz", repos = NULL, type = "source")
x <- c(3,2,0)
y <- c(0,5,3)
y>x
norm(y)>norm(x)
rm(list=ls())
setwd("/Users/markkopani/Dropbox/School/2018W1/STAT_404/webwork/webwork9_stat404")
chem1 <- c(77.3, 74.4, 76.1, 92.8)
chem2 <- c(79.4, 73.3, 81.8, 80.4)
chem3 <- c(79.4, 77.9, 80.5, 80.7)
chem4 <- c(77.4, 77.3, 77.4, 78.1)
c(mean(chem1), mean(chem2), mean(chem3), mean(chem4))
c(sd(chem1), sd(chem2), sd(chem3), sd(chem4))
sapply(c(sd(chem1), sd(chem2), sd(chem3), sd(chem4)), round)
sapply(c(sd(chem1), sd(chem2), sd(chem3), sd(chem4)), round(3))
sds <- c(sd(chem1), sd(chem2), sd(chem3), sd(chem4))
round(sds, 3)
trt <- rep(1:4, 4)
trt <- rep(1:4, each=4)
y <- c(chem1, chem2, chem3, chem4)
dat <- data.frame(trt, y)
dat
trt <- as.factor(trt)
dat <- data.frame(trt, y)
dat
with(dat, aov(y~trt))
anova <- with(dat, aov(y~trt))
summary(anova)
n <- length(y)
anova <- summary(with(dat, aov(y~trt)))
anova
anova <- with(dat, aov(y~trt))
sigE <- summary(anova)["Residuals", "Mean Sq"]
sigE <- anova$["Residuals", "Mean Sq"]
anova <- with(dat, aov(y~trt))
sigE <- summary(anova)["Residuals", "Mean Sq"]
summary(anova)["Residuals",]
summary(anova)[["Residuals",]]
summary(anova)[["Residuals","Mean Sq"]]
sigE <- anova$residuals
sigE <- mean(anova$residuals^2)
sigE <- summary(anova)
sigE
sigE <- summary(anova)["Mean Sq"]
sigE
sigE2 <- summary(anova)[[1]]$'Mean Sq'[2]
sigE2
sigE2 <- round(summary(anova)[[1]]$'Mean Sq'[2], 3)
sigE2
-summary(anova)[[1]]$'Mean Sq'[2], 0)^2
-summary(anova)[[1]]$'Mean Sq'[2], 0))^2
-summary(anova)[[1]]$'Mean Sq'[2]), 0))^2
-summary(anova)[[1]]$'Mean Sq'[2]
summary(anova)[[1]]$'Mean Sq'[1]
a <- 4
rand(anova)
install.packages("ImerTest")
n <- length(chem1)
N <- 4*n
qf(0.05/2, a-1, N-a)
CI <- c((1/n)*(0.235/qf(0.05/2, a-1, N-a)), (1/n)*(0.235/qf(1-0.05/2, a-1, N-a)))
CI
CI <- c((1/n)*(0.235/qf(0.05/2, a-1, N-a)-1), (1/n)*(0.235/qf(1-0.05/2, a-1, N-a)-1))
CI
summary(anova)
qf(0.05/2, a-1, N-a)
qf(1-0.05/2, a-1, N-a)
trt <- rep(1:4, each=4)
y <- c(chem1, chem2, chem3, chem4)
n <- length(chem1)
a <- 4
N <- 4*n
dat$trt <- as.factor(dat$trt)
anova <- with(dat, aov(y~trt))
summary(anova)
anova <- with(dat, lme(y~trt))
summary(anova)
anova <- with(dat, lm(y~trt))
library(lme4)
anova <- with(dat, lme(y~trt))
anova <- with(dat, lmer(y~trt))
anova <- with(dat, lm(y~trt))
summary(anova)
dat$trt <- as.factor(dat$trt)
anova <- with(dat, lm(y~trt))
summary(anova)
anova <- with(dat, aov(y~trt))
summary(anova)
trt <- as.factor("trt")
dat <- data.frame(trt, y)
trt <- as.factor(trt)
trt <- rep(1:4, each=4)
trt <- as.factor(trt)
dat <- data.frame(trt, y)
anova <- with(dat, aov(y~trt))
summary(anova)
anova <- with(dat, lm(y~trt))
summary(anova)
CI <- c((1/n)*(0.235/qf(0.05/2, a-1, N-a)-1), (1/n)*(0.235/qf(1-0.05/2, a-1, N-a)-1))
CI
qf(0.95, 4, 5*(3-1))
qf(0.95, 4, 5*(4-1))
(0.1206/0.0180)/(1+5*(0.021/0.018))
(0.1206/0.0180)/(1+6*(0.021/0.018))
(0.1206/0.0180)/(1+8*(0.021/0.018))
gamma <- 0.9
cv <- qf(0.95, a-1, a*(10-1))
for (i in 1:20) {
cv <- qf(0.95, a-1, a*(i-1))
w <- cv/(1+i*gamma)
power <- 1-pf(w, a-1, a*(i-1))
c(i, cv, w, power)
}
print(c(i, cv, w, power))
for (i in 1:20) {
cv <- qf(0.95, a-1, a*(i-1))
w <- cv/(1+i*gamma)
power <- 1-pf(w, a-1, a*(i-1))
print(c(i, cv, w, power))
}
for (i in 2:20) {
cv <- qf(0.95, a-1, a*(i-1))
w <- cv/(1+i*gamma)
power <- 1-pf(w, a-1, a*(i-1))
print(c(i, cv, w, power))
}
alphas <- c(-1,-.5,0,.5,1)
rm(alphas)
alpha <- c(-1,-.5,0,.5,1)
n <- 5
sum(alpha^2)
rm(list=ls())
setwd("/Users/markkopani/Dropbox/School/2018W1/STAT_404/webwork/webwork10_stat404")
dat <- read.table("data.txt", header = T)
mean(dat$porosity[dat$lot==1])
mean(dat$porosity[dat$lot==2])
mean(dat$porosity[dat$lot==3])
dat$lot <- as.factor(dat$lot)
dat$roll <- as.factor(dat$roll)
anova <- with(dat, lm(porosity~lot+roll))
summary(anova)
anova <- with(dat, aov(porosity~lot+roll))
summary(anova)
anova <- with(dat, aov(porosity~lot+roll+lot*roll))
summary(anova)
sigRoll <- (4.796-3.664)/9
sigRoll
sd(dat$porosity[dat$lot==3])
sd(dat$porosity[dat$lot==1])
sd(dat$porosity[dat$lot==2])
sd(dat$porosity[dat$lot==3])
sd(dat$porosity[dat$roll==1])
sd(dat$porosity[dat$roll==2])
sd(dat$porosity[dat$roll==3])
mean(dat$porosity[dat$roll==1])
mean(dat$porosity[dat$roll==2])
mean(dat$porosity[dat$roll==3])
summary(anova)
anova <- with(dat, aov(porosity~lot*roll+lot+roll))
summary(anova)
sd(dat$porosity[dat$lot==1])
sd(dat$porosity[dat$lot==2])
sd(dat$porosity[dat$lot==3])
anova <- with(dat, aov(porosity~lot+roll+lot*roll))
summary(anova)
rm(list=ls())
setwd("/Users/markkopani/Dropbox/School/2018W1/STAT_406/Labs/lab9_stat406")
dat <- read.table("data.txt", header = T)
dat <- read.table("data.txt")
dat <- read.table("data.txt", header = T, sep=",")
dat
kmobj <- kmeans(dat, centers = 2, nstart=50)
?kmeans
kmobj
sum(19.85815, 93.10448)
kmobj$withinss
for (i in 1:10) {
kmo <- kmeans(dat, centers = i, nstart = 50)
print(sum(kmo$withinss))
}
print(table(i, sum(kmo$withinss)))
for (i in 1:10) {
kmo <- kmeans(dat, centers = i, nstart = 50)
print(table(i, sum(kmo$withinss)))
}
print(c(i, sum(kmo$withinss)))
for (i in 1:10) {
kmo <- kmeans(dat, centers = i, nstart = 50)
print(c(i, sum(kmo$withinss)))
}
for (i in 1:10) {
kmo <- kmeans(dat, centers = i, nstart = 50)
print(c(round(i), sum(kmo$withinss)))
}
sums <- vector()
k <- vector()
for (i in 1:10) {
kmo <- kmeans(dat, centers = i, nstart = 50)
sums <- c(sums, sum(kmo$withinss))
k <- c(k, i)
}
plot(k, sums)
install.packages("mclust")
## Question 4
library(mclust)
clust <- Mclust(dat)
plot(clust)
clust
BIC
clust$bic
clust$BIC
pairs(dat, col=clust$classification)
plot(clust)
pairs(dat, col=clust$classification)
plot(dat, col=clust$classification)
clust
summary(clust)
plot(kmobj)
kmobj
summary(clust)
kmobj2 <- kmeans(dat, centers = 4, nstart=50)
kmobj1
kmobj2
kmobj2$centers
plot(kmobj2$centers)
plot(kmobj2)
plot(dat, col=kmobj2$cluster)
plot(dat, col=clust$classification)
plot(dat, col=kmobj2$cluster)
plot(dat, col=kmobj$cluster)
plot(dat, col=clust$classification)
plot(dat, col=kmobj$cluster)
source('~/.active-rstudio-document')
