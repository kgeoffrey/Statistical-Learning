unit<-BCL_data_available$PRD_CONTAINER_PER_SELL_UNIT
prcnt<-BCL_data_available$PRODUCT_ALCOHOL_PERCENT
prcnt<-BCL_data_available$PRODUCT_ALCOHOL_PERCENT
X<-matrix(c(1,1,1,1,1, class, country, litres, unit, prcnt))
X
my_model<-leaps::regsubsets(x=X, data=BCL_data_available, y=y)
n = length(class)
X<-matrix(c(1,1,1,1,1, class, country, litres, unit, prcnt), nrow=5, ncol=n+1, byrow=TRUE)
X
View(X)
X<-matrix(c(1, class, 1, country, 1, litres, 1, unit, 1, prcnt), nrow=5, ncol=n+1, byrow=TRUE)
View(X)
my_model<-leaps::regsubsets(x=X, data=BCL_data_available, y=y)
bestlm = lm(formula = CURRENT_DISPLAY_PRICE ~ PRODUCT_ALCOHOL_PERCENT + PRODUCT_COUNTRY_ORIGIN_NAME + PRODUCT_CLASS_NAME, data = BCL_data_available,
subset=(PRODUCT_COUNTRY_ORIGIN_NAME == "FRANCE" &
PRODUCT_COUNTRY_ORIGIN_NAME == "PORTUGAL" &
PRODUCT_COUNTRY_ORIGIN_NAME == "SPAIN" &
PRODUCT_COUNTRY_ORIGIN_NAME == "UNITED STATES OF AMERICA" &
PRODUCT_COUNTRY_ORIGIN_NAME == "UNITED KINGDOM" &
PRODUCT_COUNTRY_ORIGIN_NAME == "ITALY" & PRODUCT_CLASS_NAME == "WINE"))
subsetdata = subset(BCL_data_available,
PRODUCT_COUNTRY_ORIGIN_NAME %in% c("FRANCE", "ITALY", "PORTUGAL", "SPAIN",
"UNITED KINGDOM", "UNITED STATES OF AMERICA"))
bestlm = lm(formula = CURRENT_DISPLAY_PRICE ~ PRODUCT_ALCOHOL_PERCENT +
PRODUCT_COUNTRY_ORIGIN_NAME + PRODUCT_CLASS_NAME, data = subsetdata)
summary(betslm)
summary(bestlm)
bestlm = lm(formula = CURRENT_DISPLAY_PRICE ~ PRODUCT_ALCOHOL_PERCENT +
PRODUCT_COUNTRY_ORIGIN_NAME + PRODUCT_CLASS_NAME[PRODUCT_CLASS_NAME="WINE"], data = subsetdata)
summary(bestlm)
subsetdata2 = subset(subsetdata, PRODUCT_CLASS_NAME %in% "WINE")
bestlm = lm(formula = CURRENT_DISPLAY_PRICE ~ PRODUCT_ALCOHOL_PERCENT +
PRODUCT_COUNTRY_ORIGIN_NAME + PRODUCT_CLASS_NAME, data = subsetdata2)
bestlm = lm(formula = log(CURRENT_DISPLAY_PRICE) ~ PRODUCT_ALCOHOL_PERCENT +
PRODUCT_COUNTRY_ORIGIN_NAME + PRODUCT_CLASS_NAME, data = subsetdata2)
subsetdata = subset(BCL_data_available,
PRODUCT_COUNTRY_ORIGIN_NAME %in% c("FRANCE", "ITALY", "PORTUGAL", "SPAIN",
"UNITED KINGDOM", "UNITED STATES OF AMERICA"))
bestlm = lm(formula = log(CURRENT_DISPLAY_PRICE) ~ PRODUCT_ALCOHOL_PERCENT +
PRODUCT_COUNTRY_ORIGIN_NAME + PRODUCT_CLASS_NAME, data = subsetdata)
summary(bestlm)
bestlm = lm(formula = log(CURRENT_DISPLAY_PRICE) ~ PRODUCT_ALCOHOL_PERCENT +
PRODUCT_COUNTRY_ORIGIN_NAME, data = subsetdata)
summary(bestlm)
bestlm = lm(formula = log(CURRENT_DISPLAY_PRICE) ~ PRODUCT_ALCOHOL_PERCENT +
PRODUCT_COUNTRY_ORIGIN_NAME + PRODUCT_CLASS_NAME, data = subsetdata)
summary(bestlm)
View(BCL_data_available)
bestlm = lm(formula = log(CURRENT_DISPLAY_PRICE) ~ PRODUCT_ALCOHOL_PERCENT +
PRODUCT_COUNTRY_ORIGIN_NAME + PRODUCT_CLASS_NAME + PRODUCT_LITRES_PER_CONTAINER*PRODUCT_ALCOHOL_PERCENT, data = subsetdata)
summary(bestlm)
View(subsetdata)
bestlm = lm(formula = log(CURRENT_DISPLAY_PRICE) ~ PRODUCT_ALCOHOL_PERCENT +
PRODUCT_COUNTRY_ORIGIN_NAME + PRODUCT_CLASS_NAME + PRODUCT_LITRES_PER_CONTAINER*PRODUCT_ALCOHOL_PERCENT + PRODUCT_CLASS_NAME*PRD_CONTAINER_PER_SELL_UNIT, data = subsetdata)
summary(bestlm)
my_model = lm(formula = log(CURRENT_DISPLAY_PRICE) ~ PRODUCT_ALCOHOL_PERCENT +
PRODUCT_COUNTRY_ORIGIN_NAME + PRODUCT_CLASS_NAME + PRODUCT_LITRES_PER_CONTAINER*PRODUCT_ALCOHOL_PERCENT + PRODUCT_CLASS_NAME*PRD_CONTAINER_PER_SELL_UNIT, data = subsetdata)
source("18399148.R")
### DO NOT CHANGE ANY CODE BELOW ##
stopifnot("my_model" %in% ls())
stopifnot(inherits(my_model, "lm"))
fake_df <- data.frame(PRODUCT_LONG_NAME = c("A", "B", "C"),
PRODUCT_TYPE_NAME = c("LIQUOR", "LIQUOR", "LIQUOR"),
PRODUCT_CLASS_NAME = c("SPIRITS", "WINE", "WINE"),
PRODUCT_COUNTRY_ORIGIN_NAME = c("FRANCE", "GERMANY", "CANADA"),
PRODUCT_LITRES_PER_CONTAINER = c(0.1, 0.2, 0.3),
PRD_CONTAINER_PER_SELL_UNIT = c(1, 2, 3),
PRODUCT_ALCOHOL_PERCENT = c(10.0, 20.0, 30.0),
CURRENT_DISPLAY_PRICE = c(1.99, 2.99, 3.99))
predict(my_model, newdata=fake_df)
subsetdata
summary(my_model)
my_model = lm(formula = log(CURRENT_DISPLAY_PRICE) ~ PRODUCT_ALCOHOL_PERCENT +
PRODUCT_COUNTRY_ORIGIN_NAME + PRODUCT_CLASS_NAME + PRODUCT_LITRES_PER_CONTAINER*PRODUCT_ALCOHOL_PERCENT + PRODUCT_CLASS_NAME*PRD_CONTAINER_PER_SELL_UNIT, data = BCL_data_available)
summary(my_model)
my_model = lm(formula = log(CURRENT_DISPLAY_PRICE) ~ PRODUCT_ALCOHOL_PERCENT +
PRODUCT_COUNTRY_ORIGIN_NAME + PRODUCT_CLASS_NAME + PRODUCT_LITRES_PER_CONTAINER*PRODUCT_ALCOHOL_PERCENT + PRODUCT_CLASS_NAME*PRD_CONTAINER_PER_SELL_UNIT, data = BCL_data_available)
source("18399148.R")
### DO NOT CHANGE ANY CODE BELOW ##
stopifnot("my_model" %in% ls())
stopifnot(inherits(my_model, "lm"))
fake_df <- data.frame(PRODUCT_LONG_NAME = c("A", "B", "C"),
PRODUCT_TYPE_NAME = c("LIQUOR", "LIQUOR", "LIQUOR"),
PRODUCT_CLASS_NAME = c("SPIRITS", "WINE", "WINE"),
PRODUCT_COUNTRY_ORIGIN_NAME = c("FRANCE", "GERMANY", "CANADA"),
PRODUCT_LITRES_PER_CONTAINER = c(0.1, 0.2, 0.3),
PRD_CONTAINER_PER_SELL_UNIT = c(1, 2, 3),
PRODUCT_ALCOHOL_PERCENT = c(10.0, 20.0, 30.0),
CURRENT_DISPLAY_PRICE = c(1.99, 2.99, 3.99))
predict(my_model, newdata=fake_df)
my_model = lm(formula = log(CURRENT_DISPLAY_PRICE) ~ PRODUCT_ALCOHOL_PERCENT +
PRODUCT_COUNTRY_ORIGIN_NAME + PRODUCT_CLASS_NAME + PRODUCT_LITRES_PER_CONTAINER*PRODUCT_ALCOHOL_PERCENT + PRODUCT_CLASS_NAME*PRD_CONTAINER_PER_SELL_UNIT, data = BCL_data_available)
library(readr)
BCL_data_available <- read.csv("BCL_data_available.csv")
library(readr)
BCL_data_available <- read_csv("~/Dropbox/School/2017W2/STAT 306/Homework #5/BCL_data_available.csv")
View(BCL_data_available)
my_model = lm(formula = log(CURRENT_DISPLAY_PRICE) ~ PRODUCT_ALCOHOL_PERCENT +
PRODUCT_COUNTRY_ORIGIN_NAME + PRODUCT_CLASS_NAME + PRODUCT_LITRES_PER_CONTAINER*PRODUCT_ALCOHOL_PERCENT + PRODUCT_CLASS_NAME*PRD_CONTAINER_PER_SELL_UNIT, data = BCL_data_available)
RSS = c(crossprod(my_model$residuals))
MSE = RSS / length(my_model$residuals)
sqrt(MSE)
setpwd("~/Dropbox/School/2017W2/STAT 306/Homework #5/")
BCL_data_available <- read.csv("BCL_data_available.csv")
library(readr)
BCL_data_available <- read_csv("BCL_data_available.csv")
BCL_data_available <- read.csv("BCL_data_available.csv")
library(readr)
BCL_data_available <- read_csv("~/Dropbox/School/2017W2/STAT 306/Homework #5/BCL_data_available.csv")
View(BCL_data_available)
my_model = lm(formula = log(CURRENT_DISPLAY_PRICE) ~ PRODUCT_ALCOHOL_PERCENT +
PRODUCT_COUNTRY_ORIGIN_NAME + PRODUCT_CLASS_NAME + PRODUCT_LITRES_PER_CONTAINER*PRODUCT_ALCOHOL_PERCENT + PRODUCT_CLASS_NAME*PRD_CONTAINER_PER_SELL_UNIT, data = BCL_data_available)
RSS=c(crossprod(my_model$residuals))
MSE = RSS / length(my_model$residuals)
sqrt(MSE)
my_model = lm(formula = log(CURRENT_DISPLAY_PRICE) ~ PRODUCT_ALCOHOL_PERCENT +
I(PRODUCT_COUNTRY_ORIGIN_NAME%in%c("FRANCE", "ITALY", "SPAIN", "PORTUGAL", "UNITED STATES OF AMERICA", "UNITED KINGDOM")) + PRODUCT_CLASS_NAME + PRODUCT_LITRES_PER_CONTAINER*PRODUCT_ALCOHOL_PERCENT + PRODUCT_CLASS_NAME*PRD_CONTAINER_PER_SELL_UNIT, data = BCL_data_available)
RSS=c(crossprod(my_model$residuals))
MSE = RSS / length(my_model$residuals)
sqrt(MSE)
my_model = lm(formula = log(CURRENT_DISPLAY_PRICE) ~
PRODUCT_ALCOHOL_PERCENT +
I(PRODUCT_COUNTRY_ORIGIN_NAME%in%c("FRANCE", "ITALY", "SPAIN", "PORTUGAL", "UNITED STATES OF AMERICA", "UNITED KINGDOM")) +
PRODUCT_CLASS_NAME +
log(PRODUCT_LITRES_PER_CONTAINER*PRODUCT_ALCOHOL_PERCENT) +
PRODUCT_CLASS_NAME*PRD_CONTAINER_PER_SELL_UNIT,
data = BCL_data_available)
RSS=c(crossprod(my_model$residuals))
MSE = RSS / length(my_model$residuals)
sqrt(MSE)
my_model = lm(formula = log(CURRENT_DISPLAY_PRICE) ~
PRODUCT_ALCOHOL_PERCENT +
I(PRODUCT_COUNTRY_ORIGIN_NAME%in%c("FRANCE", "ITALY", "SPAIN", "PORTUGAL", "UNITED STATES OF AMERICA", "UNITED KINGDOM")) +
PRODUCT_CLASS_NAME +
log(PRODUCT_LITRES_PER_CONTAINER*PRODUCT_ALCOHOL_PERCENT) +
PRODUCT_LITRES_PER_CONTAINER*PRD_CONTAINER_PER_SELL_UNIT,
data = BCL_data_available)
RSS=c(crossprod(my_model$residuals))
MSE = RSS / length(my_model$residuals)
sqrt(MSE)
RSS=c(crossprod(my_model$residuals))
MSE = RSS / length(my_model$residuals)
sqrt(MSE)
source("18399148.R")
### DO NOT CHANGE ANY CODE BELOW ##
stopifnot("my_model" %in% ls())
stopifnot(inherits(my_model, "lm"))
fake_df <- data.frame(PRODUCT_LONG_NAME = c("A", "B", "C"),
PRODUCT_TYPE_NAME = c("LIQUOR", "LIQUOR", "LIQUOR"),
PRODUCT_CLASS_NAME = c("SPIRITS", "WINE", "WINE"),
PRODUCT_COUNTRY_ORIGIN_NAME = c("FRANCE", "GERMANY", "CANADA"),
PRODUCT_LITRES_PER_CONTAINER = c(0.1, 0.2, 0.3),
PRD_CONTAINER_PER_SELL_UNIT = c(1, 2, 3),
PRODUCT_ALCOHOL_PERCENT = c(10.0, 20.0, 30.0),
CURRENT_DISPLAY_PRICE = c(1.99, 2.99, 3.99))
predict(my_model, newdata=fake_df)
k<-qpois(.05, lambda=5*133)
k
k<-qpois(.05, lambda=5*36)
k
ppois(133, lambda=5*36)
ppois(k, lambda=4.7*36)
k<-qpois(.05, lambda=5*36)-1
k
ppois(k, lambda=4.7*36)
errors<-c(3,1,3,8,4,5,6,3,3,0,2,4,5,4,3,3,3,3,4,3,1,5,5,1,6,7,3,3,3,6,3,6,3,3,5,3)
sum(errors)
mean(errors)
mu<-mean(errors)
sumy=sum(errors)
n=36
mu=4.7
q2a=sumy*log(mu)-36*mu-log(prod(errors!))
q2a=sumy*log(mu)-36*mu-log(prod(factorial(errors))
q2a
q2a=sumy*log(mu)-36*mu-log(prod(factorial(errors))
q2a
q2a=sumy*log(mu)-36*mu-log(prod(factorial(errors)))
q2a
alpha=6.5+sumy
beta=n+1.5
q2b=pgamma(5, shape=6.5, scale=1/1.5, lower.tail = TRUE)
q2b
q2c=pgamma(4, shape=alpha, scale=1/beta, lower.tail = TRUE)
q2c
q2d=pgamma(4, shape=alpha, scale=1/beta, lower.tail = FALSE)
q2d
q2e=pgamma(5, shape=alpha, scale=1/beta, lower.tail = TRUE)
q2e
q2d=pgamma(5, shape=alpha, scale=1/beta, lower.tail = FALSE)
q2d
source('~/.active-rstudio-document')
rm(list=ls())
xx = 35
b0=6.1
b1=0.09
tem=b0-b1*xx
q1a=1/(1+exp(-tem))
exp(tem)/(1+exp(temp))
exp(tem)/(1+exp(tem))
q1a
q1b=(log(.6/.4)-b0)/(-b1)
q1b
itrain=c(52, 161, 172, 100, 64, 17, 21, 142, 62, 40, 63, 14, 157, 45, 42, 133, 25, 140, 76, 2, 75, 48, 37, 124, 58, 173, 167, 61, 152, 90, 102, 18, 111, 86, 79, 12, 145, 192, 89, 122, 113, 83, 99, 162, 134, 19, 183, 73, 35, 56, 148, 68, 137, 188, 6, 103, 179, 60, 54, 196, 91, 15, 144, 29, 9, 141, 176, 120, 33, 77, 87, 136, 47, 101, 84, 153, 147, 22, 38, 23, 119, 98, 65, 160, 107, 31, 159, 187, 155, 13, 151, 71, 149, 121, 110, 82, 189, 78, 175, 27, 146, 97, 112, 66, 26, 185, 20, 178, 193, 88, 43, 170, 115, 169, 8, 109, 72, 127, 123, 69, 150, 166, 51, 28, 30, 191, 95, 53, 190, 181, 143, 81, 165, 199, 164, 126, 70, 96, 44, 200, 3, 168, 59, 116, 114, 67, 4, 177, 198, 125, 154, 156, 5, 184, 139, 85, 74, 117, 108, 158, 186, 10, 16, 106, 39, 36, 32, 182, 130, 92)
ihold=c(117, 273, 18, 141, 260, 296, 47, 57, 285, 155, 287, 210, 16, 147, 216, 139, 131, 164, 281, 118, 34, 62, 115, 94, 108, 156, 35, 161, 65, 242, 190, 244, 253, 154, 11, 72, 178, 307, 24, 48, 109, 217, 250, 317, 298, 293, 309, 90, 219, 234, 221, 143, 224, 295, 174, 196, 183, 51, 207, 95, 305, 69, 254, 330, 96, 220, 79, 187, 265, 208, 20, 87, 306, 127, 204, 228, 142, 222, 282, 29, 38, 232, 201, 77, 173, 91, 106, 269, 134, 121, 44, 276, 322, 279, 105, 316, 75, 299, 212, 294, 82, 274, 138, 83, 40, 249, 205, 124, 185, 240, 84, 129, 252, 313, 312, 116, 237, 133, 27, 122, 304, 171, 290, 152, 238, 170, 256, 150, 13, 215, 280, 41, 103, 136, 5, 63, 303, 218, 325, 93, 320, 114, 123, 318, 247, 137, 165, 85, 262, 86, 255, 277, 289, 203, 140, 167, 36, 113, 89, 144, 261, 182, 132, 12, 58, 195, 2, 227, 198, 211, 54, 146, 245, 239, 259, 197, 292, 231, 64, 9, 163, 314, 326, 251, 332, 172, 157, 158, 30, 311, 162, 266, 107, 135, 177, 324, 60, 268, 288, 301)
library(MASS)
data(Pima.tr)
mytrain=Pima.tr[itrain,]
data(Pima.te)
myhold=Pima.te[ihold,]
model1<-lm(mytrain~npreg+glu+bp+skin+bmi+ped+age)
model1<-lm(type~npreg+glu+bp+skin+bmi+ped+age, data=mytrain)
model1
x1=c(1.8, 2.4, 1.3, 0.7, 2.5, 0.2, 8.7, 2.1, 1.4, 0, 0.3, 0.5, 4.4, 4, 2.8, 1.2, 2.5, 4.1, 1.1, 1.6)
x2=c(2.8, 1.6, 3.5, 1.1, 2.4, 5, 11.3, 5.4, 5.6, 5.7, 3.8, 1.5, 3.1, 1, 2.2, 3, 1, 5, 5.1, 5.9)
y=c(14.7, 13.2, 13.5, 7.7, 16.2, 13.8, 52.3, 20.4, 19, 15.1, 10.6, 7.7, 22.8, 16, 16, 13.4, 13.3, 19.8, 17.4, 19.7)
lm(formula=y~x1+x2)
reg<-lm(formula=y~x1+x2)
summary(reg)
b=resid(reg)
max(abs(b))
x=c(-0.08955, -0.116457, 0.081953, 0.089772, 0.051721, 0.000196, 0.071522, 0.033009, 0.0351, -0.01996, 0.055779, 0.017615, -0.037675, 0.028115, 0.057133, 0.014651, -0.085532, -0.055388, 0.066516, -0.048612, 0.083928, 0.036193, -0.002293, 0.063257, 0.022393, 0.031457, -0.001048, 0.028097, -0.013593, -0.018426, -0.021708, -0.058467, -0.074467, 0.102307, -0.005071, 0.008497, 0.04266, 0.039787, 0.030852, -0.007526, -0.064699, 0.038793, 0.012519, 0.019571, 0.023947, -0.019988, 0.002843, 0.007043)
model<-lm(y~x)
y=c(-0.057807, -0.044932, 0.083661, -0.020541, 0.13278, -0.015908, 0.038136, -0.02175, 0.104308, -0.007348, 0.077604, -0.00362, -0.049556, -0.02834, 0.050531, -0.028561, -0.039101, -0.01698, 0.094941, 0.013838, 0.053897, 0.046764, 0.036603, 0.040061, -0.04536, 0.01686, 0.044618, 0.016518, -0.009547, 0.01445, 0.01038, 0.035503, -0.03518, 0.011227, -0.008972, 0.040062, -0.035566, 0.034019, 0.065042, 0.030578, -0.021047, 0.052083, 0.032746, -0.077098, 0.020887, -0.020032, 0.026713, -0.04512)
model<-lm(y~x)
summary(model)
res=model$residuals
res
sse=sum(res^2)
sse
mmodel
model
acf(res)
library(lmtest)
dwtest(y~x, alternative = c("two.sided"))
sse=sum(res^2)
sscp=sum(res[1:47]*res[2:48])
r1lag=sscp/sqrt((sse-res[1]^2)*(sse-res[48]^2))
r1lag
fit1<-glm(type~npreg+glu+bp+skin+bmi+ped+age, family=binomial, data=mytrain)
fit2<-glm(type~glu+bmi+ped+age, family=binomial, data=mytrain)
summary(fit1)
summary(fit2)
pred1=predict(fit1, type="response", new=myhold)
pred1=predict(fit1, type="response", new=myhold)
pred1
pred2=predict(fit2, type="response", new=myhold)
pred2
pred1
tempp=cbind(pred1,pred2)
tempp[1:4,]
print(tempp[1:4,])
tab1=table(myhold$type, (pred1>=0.5))
tab2=table(myhold$type, (pred2>=0.5))
tab1
tab2
tab1s=table(myhold$type, (pred1>=0.3))
tab2s=table(myhold$type, (pred2>=0.3))
tab1s
tab2s
m100=c(11.45, 11.73, 12, 11.84, 11.96, 11, 12.3, 11.43, 12.25, 11.76, 11.79, 11.09, 10.81, 11.45, 12.03, 11.81, 11.13, 11.79, 11.61, 11, 11.44, 11.85, 11.46, 12.23, 12.25, 11.25, 11.16, 11.01, 11.95, 11.15, 12.14, 11.06, 11.96, 11.13, 11.43, 11.2, 11.22, 11.75, 12.9, 11.6, 11.58, 11.95, 11.89, 11.55, 11.76, 11.29, 12.74, 11.73, 11.98, 11.8, 11.41, 11.31, 10.79, 11.42)
m200=c(23.31, 23.88, 24.52, 24.54, 24.6, 22.13, 25, 23.09, 25.07, 25.08, 24.05, 21.97, 21.71, 23.06, 24.96, 24.22, 22.39, 24.08, 22.94, 22.25, 23.46, 24.24, 23.05, 24.21, 25.78, 22.81, 22.82, 22.39, 24.41, 22.59, 24.47, 22.19, 24.49, 22.21, 23.51, 22.35, 22.62, 24.46, 27.1, 24, 23.31, 24.28, 23.62, 23.13, 23.54, 23, 25.85, 24, 24.44, 23.98, 23.04, 23.17, 21.83, 23.52)
m400=c(53.11, 52.7, 54.9, 56.09, 58.25, 50.46, 55.08, 50.62, 56.96, 58.1, 56.05, 47.99, 48.16, 51.5, 56.1, 54.3, 50.14, 54.93, 54.5, 50.06, 51.2, 55.34, 53.3, 55.09, 51.2, 52.38, 51.79, 49.75, 54.97, 51.73, 55, 49.19, 55.7, 49.29, 53.24, 51.08, 52.5, 55.8, 60.4, 53.26, 53.12, 53.6, 53.76, 51.6, 54.6, 52.01, 58.73, 53.73, 56.45, 53.59, 52, 52.8, 50.62, 53.6)
m800=c(2.02, 2, 2.05, 2.28, 2.21, 1.98, 2.12, 1.99, 2.24, 2.27, 2.24, 1.89, 1.93, 2.01, 2.07, 2.09, 2.03, 2.07, 2.15, 2, 1.92, 2.22, 2.16, 2.19, 1.97, 1.99, 2.02, 1.95, 2.08, 2, 2.18, 1.89, 2.15, 1.95, 2.05, 1.98, 2.1, 2.2, 2.3, 2.11, 2.03, 2.1, 2.04, 2.02, 2.19, 1.96, 2.33, 2.09, 2.15, 2.05, 2, 2.1, 1.96, 2.03)
m1500=c(4.07, 4.15, 4.23, 4.86, 4.68, 4.03, 4.52, 4.22, 4.84, 4.79, 4.74, 4.14, 3.96, 4.14, 4.38, 4.16, 4.1, 4.35, 4.43, 4.06, 3.96, 4.61, 4.58, 4.69, 4.25, 4.06, 4.12, 4.03, 4.33, 4.14, 4.45, 3.87, 4.42, 3.99, 4.11, 4.13, 4.38, 4.72, 4.84, 4.35, 4.01, 4.32, 4.25, 4.18, 4.6, 3.98, 5.81, 4.35, 4.37, 4.14, 4.14, 4.49, 3.95, 4.18)
m3000=c(8.77, 9.2, 9.37, 10.54, 10.43, 8.62, 9.94, 9.34, 10.69, 10.9, 9.89, 8.92, 8.75, 8.98, 9.64, 8.84, 8.92, 9.87, 9.79, 8.81, 8.53, 10.02, 9.81, 10.46, 9.35, 9.01, 8.84, 8.59, 9.31, 8.98, 9.51, 8.45, 9.62, 8.97, 8.89, 9.08, 9.63, 10.28, 11.1, 9.46, 8.53, 9.98, 9.59, 8.76, 10.16, 8.63, 13.04, 9.2, 9.38, 9.02, 8.88, 9.77, 8.5, 8.71)
marathon=c(153.42, 181.05, 171.38, 215.08, 171.8, 149.72, 182.77, 159.37, 233, 261.13, 203.88, 158.85, 157.68, 156.37, 174.68, 151.2, 154.23, 182.2, 178.52, 149.45, 165.45, 201.28, 169.98, 182.17, 179.17, 152.48, 154.48, 148.53, 168.48, 155.27, 191.02, 151.22, 164.65, 160.82, 149.38, 152.37, 177.87, 168.45, 233.22, 165.42, 145.48, 188.03, 158.53, 145.48, 200.37, 151.82, 306, 150.5, 201.08, 162.6, 157.85, 168.75, 142.72, 151.75)
country=c('switzerl', 'kenya', 'chile', 'guatemal', 'costa', 'gbni', 'singapor', 'austria', 'png', 'mauritiu', 'domrep', 'czech', 'gdr', 'hungary', 'luxembou', 'portugal', 'finland', 'greece', 'argentin', 'canada', 'rumania', 'indonesi', 'bermuda', 'malaysia', 'dprkorea', 'netherla', 'sweden', 'frg', 'china', 'france', 'burma', 'ussr', 'korea', 'poland', 'ireland', 'australi', 'taipei', 'thailand', 'cookis', 'columbia', 'norway', 'india', 'mexico', 'nz', 'philippi', 'italy', 'wsamoa', 'japan', 'turkey', 'spain', 'belgium', 'brazil', 'usa', 'denmark')
rack=data.frame(m100,m200,m400,m800,m1500,m3000,marathon)
print(cov(track))
print(cor(track))
pca.cov=princomp(track,cor=F,scores=T)
pca.cor=princomp(track,cor=T,scores=T)
print(summary(pca.cov))
print(pca.cov)
print(summary(pca.cor))
print(pca.cor)
speed=track  # to allocate space and column names
speed[,1]=100/track[,1];
speed[,2]=200/track[,2];
speed[,3]=400/track[,3];
speed[,4]=800/(60*track[,4]);
speed[,5]=1500/(60*track[,5]);
speed[,6]=3000/(60*track[,6]);
speed[,7]=42195/(60*track[,7])
print(cov(speed)); print(cor(speed))
print(summary(speed))
pca2.cov=princomp(speed,cor=F,scores=T)
print(summary(pca2.cov))
print(pca2.cov)
track=data.frame(m100,m200,m400,m800,m1500,m3000,marathon)
rm(rack)
print(cov(track))
print(cor(track))
pca.cov=princomp(track,cor=F,scores=T)
pca.cor=princomp(track,cor=T,scores=T)
print(summary(pca.cov))
print(pca.cov)
print(summary(pca.cor))
print(pca.cor)
speed=track  # to allocate space and column names
speed[,1]=100/track[,1];
speed[,2]=200/track[,2];
speed[,3]=400/track[,3];
speed[,4]=800/(60*track[,4]);
speed[,5]=1500/(60*track[,5]);
speed[,6]=3000/(60*track[,6]);
speed[,7]=42195/(60*track[,7])
print(cov(speed)); print(cor(speed))
print(summary(speed))
pca2.cov=princomp(speed,cor=F,scores=T)
print(summary(pca2.cov))
print(pca2.cov)
print(cov(track))
source('~/Dropbox/School/2017W2/STAT 306/hw7_stat306.R')
x1 = c(6, 13, 31, 21)
x2 = c(22, 91, 37, 17)
table = as.table(rbind(t(x1), t(x2)))
chisqulcer<- chisq.test(table)
chisqulcer
control<-c(168.6, 33.6, 201, 236.3, 211.6, 111.4, 120.8, 241.5, 48.1, 289.5, 193.3, 209.5, 274.3, 128.6, 150.6, 285.1, 183.6, 174.5, 303.9, 216.9, 225.7, 182.2, 140.9, 33.9, 168.8, 260.1)
treatment<-c(190.8, 51.9, 224.9, 272.5, 230.6, 154.6, 160.4, 276.1, 70.4, 334.6, 216.4, 233.1, 300.6, 150.8, 208.8, 322.5, 225.4, 208.2, 334.5, 231.8, 262, 215.6, 192.7, 70.1, 208.8, 297.3)
mean(control-treatment)
mean(treatment-control)
sd(treatment-control)/sqrt(26)
deltahat=mean(treatment-control)
SD=sd(treatment-control)/sqrt(26)
CI = c(deltahat-2.0555*SD)
CI = c(deltahat-2.0555*SD, deltahat+2.0555*SD)
CI
difftest = t.test(treatment, control, alternative=c("greater"), paired=TRUE)
difftest
rm(list=ls())
rm(list=ls())
beta <- solve(((t(X)%*%X)^(-1))%*%t(X)%*%y)
## Question 1
linear <- function(y, X) {
beta <- solve(((t(X)%*%X)^(-1))%*%t(X)%*%y)
return(beta)
}
A = matrix(c(1,2,3,4,5,6,7,8,9), nrow=3, ncol=3)
A
A[:,3]
A[,3]
a = c(1,2,3)
b = c(4,5,6)
data.frame(a, b)
data.frame(a, b)[sample(nrow(data.frame(a, b)), 4, replace = FALSE)]
df = data.frame(a, b)
df[sample(nrow(df), 4, replace = FALSE)]
df[sample(nrow(df), 4, replace = FALSE), ]
df[sample(nrow(df), 4), ]
df[sample(nrow(df), 2, replace = FALSE), ]
df[sample(nrow(df), 2, replace = FALSE), ]
extr<-df[sample(nrow(df), 2, replace = FALSE), ]
extr
extr<-df[sample(nrow(df), 1, replace = FALSE), ]
extr
extr[1,2]
extr[,2]
rm(list=ls())
getwd()
setwd("~/Dropbox/School/2018W1/STAT_406/Labs/lab1_stat406")
dat <- read.table("prostate_mod.data")
dat <- read.table("Lab 1.data")
head(dat)
plot(dat)
model = lm(lpsa ~ lcavol, lweight, age, lbph, svi, lcp, gleason, pgg45, data=dat)
View(dat)
View(dat)
model = lm(lpsa ~., data=dat)
model
model
vcov(model)
vcov(model)
cor(data
cor(data)
cor(data)
set.seed(400)
gpind <- sample(rep(1:3, each=32))
head(gpind)
train <- gpind[gpind != 1]
test <- gpind[gpind = 1]
head(test)
train <- gpind[gpind != 1]
train
test <- gpind[gpind == 1]
vcov(dat)
plot(model)
plot(dat)
cor(dat)
partialmodel = lm(lpsa ~ lcavol, lcp, svi, data=dat)
partialmodel = lm(lpsa ~ lcavol+lcp+svi, data=dat)
partialmodel
fullmodel
fullmodel = lm(lpsa ~., data=dat)
fullmodel
summary(fullmodel)
summary(partialmodel)
train <- dat[gpind != 1, ]
test <- dat[gpind == 1, ]
fulltrain <- lm(lpsa ~., data=train)
partialtrain <- lm(lpsa ~ lcavol+lcp+svi, data=train)
fulltrain
partialtrain
for (i in 1:3) {
fulltrain <- lm(lpsa ~., data=train)
partialtrain <- lm(lpsa ~ lcavol+lcp+svi, data=train)
}
cov(train)
cor(train)
partialtrain <- lm(lpsa ~ lcavol+svi+weight, data=train)
for (i in 1:3) {
fulltrain <- lm(lpsa ~., data=train)
partialtrain <- lm(lpsa ~ lcavol+svi+weight, data=train)
}
partialtrain <- lm(lpsa ~ lcavol+lweight+svi, data=train)
for (i in 1:3) {
fulltrain <- lm(lpsa ~., data=train)
partialtrain <- lm(lpsa ~ lcavol+lweight+svi, data=train)
}
for (i in 1:3) {
train <- dat[gpind != 1, ]
test <- dat[gpind == 1, ]
fulltrain <- lm(lpsa ~., data=train)
partialtrain <- lm(lpsa ~ lcavol+lweight+svi, data=train)
pr.full <- predict(fulltrain, newdata=test)
pr.partial <- predict(partialtrain, newdata=test)
}
mspe <- mean( (train$lpsa - pr.full)^2 )
mspe <- mean( (dat$lpsa - pr.full)^2 )
mspe <- mean( (dat$lpsa - pr.full)^2 )
for (i in 1:3) {
train <- dat[gpind != 1, ]
test <- dat[gpind == 1, ]
fulltrain <- lm(lpsa ~., data=train)
partialtrain <- lm(lpsa ~ lcavol+lweight+svi, data=train)
pr.full <- predict(fulltrain, newdata=test)
pr.partial <- predict(partialtrain, newdata=test)
}
cor(train)
mspe <- mean( (dat$lpsa - pr.full)^2 )
mspe_full <- mean( (dat$lpsa - pr.full)^2 )
mspe_full <- mean( (dat$lpsa - pr.full)^2 )
mspe_partial <- mean( (dat$lpsa - pr.part)^2 )
mspe_partial <- mean( (dat$lpsa - pr.partial)^2 )
mspe_full <- mean( (dat$lpsa - pr.full)^2 )
mspe_partial <- mean( (dat$lpsa - pr.partial)^2 )
rm(mspe)
for (i in 1:3) {
train <- dat[gpind != 1, ]
test <- dat[gpind == 1, ]
fulltrain <- lm(lpsa ~., data=train)
partialtrain <- lm(lpsa ~ lcavol+lweight+svi, data=train)
pr.full <- predict(fulltrain, newdata=test)
pr.partial <- predict(partialtrain, newdata=test)
}
mspe_full <- mean( (dat$lpsa - pr.full)^2 )
mspe_partial <- mean( (dat$lpsa - pr.partial)^2 )
for (i in 1:3) {
train <- dat[gpind != 2, ]
test <- dat[gpind == 2, ]
fulltrain <- lm(lpsa ~., data=train)
partialtrain <- lm(lpsa ~ lcavol+lweight+svi, data=train)
pr.full <- predict(fulltrain, newdata=test)
pr.partial <- predict(partialtrain, newdata=test)
}
cor(train)
for (i in 1:3) {
train <- dat[gpind != 2, ]
test <- dat[gpind == 2, ]
fulltrain <- lm(lpsa ~., data=train)
partialtrain <- lm(lpsa ~ lcavol+lweight+svi, data=train)
pr.full <- predict(fulltrain, newdata=test)
pr.partial <- predict(partialtrain, newdata=test)
}
cor(train)
mspe_full <- mean( (dat$lpsa - pr.full)^2 )
mspe_partial <- mean( (dat$lpsa - pr.partial)^2 )
for (i in 1:3) {
train <- dat[gpind != 3, ]
test <- dat[gpind == 3, ]
fulltrain <- lm(lpsa ~., data=train)
partialtrain <- lm(lpsa ~ lcavol+lweight+svi, data=train)
pr.full <- predict(fulltrain, newdata=test)
pr.partial <- predict(partialtrain, newdata=test)
}
cor(train)
mspe_full <- mean( (dat$lpsa - pr.full)^2 )
mspe_partial <- mean( (dat$lpsa - pr.partial)^2 )
for (i in 1:3) {
train <- dat[gpind != 2, ]
test <- dat[gpind == 2, ]
fulltrain <- lm(lpsa ~., data=train)
partialtrain <- lm(lpsa ~ lcavol+lweight+svi, data=train)
pr.full <- predict(fulltrain, newdata=test)
pr.partial <- predict(partialtrain, newdata=test)
}
cor(train)
mspe_full <- mean( (dat$lpsa - pr.full)^2 )
mspe_partial <- mean( (dat$lpsa - pr.partial)^2 )
test <- dat[gpind == 3, ]
for (i in 1:3) {
train <- dat[gpind != 3, ]
test <- dat[gpind == 3, ]
fulltrain <- lm(lpsa ~., data=train)
partialtrain <- lm(lpsa ~ lcavol+lweight+svi, data=train)
pr.full <- predict(fulltrain, newdata=test)
pr.partial <- predict(partialtrain, newdata=test)
}
mspe_full <- mean( (dat$lpsa - pr.full)^2 )
mspe_partial <- mean( (dat$lpsa - pr.partial)^2 )
