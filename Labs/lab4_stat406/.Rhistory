rm(list=ls())
beta <- solve(((t(X)%*%X)^(-1))%*%t(X)%*%y)
## Question 1
linear <- function(y, X) {
beta <- solve(((t(X)%*%X)^(-1))%*%t(X)%*%y)
return(beta)
}
A = matrix(c(1,2,3,4,5,6,7,8,9), nrow=3, ncol=3)
A
A[:,3]
A[,3]
a = c(1,2,3)
b = c(4,5,6)
data.frame(a, b)
data.frame(a, b)[sample(nrow(data.frame(a, b)), 4, replace = FALSE)]
df = data.frame(a, b)
df[sample(nrow(df), 4, replace = FALSE)]
df[sample(nrow(df), 4, replace = FALSE), ]
df[sample(nrow(df), 4), ]
df[sample(nrow(df), 2, replace = FALSE), ]
df[sample(nrow(df), 2, replace = FALSE), ]
extr<-df[sample(nrow(df), 2, replace = FALSE), ]
extr
extr<-df[sample(nrow(df), 1, replace = FALSE), ]
extr
extr[1,2]
extr[,2]
rm(list=ls())
pwd
pwd()
## Question 1
exper <- read.csv("experiment.csv")
exper <- read.table("~/Dropbox/School/2018W1/STAT_404/webwork/webwork1_stat404/exper.txt", quote="\"", comment.char="")
View(exper)
## Question 1
exper <- read.table("~/Dropbox/School/2018W1/STAT_404/webwork/webwork1_stat404/exper.txt", quote="\"", comment.char="")
control <- read.table("~/Dropbox/School/2018W1/STAT_404/webwork/webwork1_stat404/exper.txt", quote="\"", comment.char="")
View(control)
View(control)
e.meanbefore <- mean(exper[,1])
e.meanafter <- mean(exper[,2])
exper[,1]
e.meandif <- e.meanbefore - e.meanafter
e.meandif
e.dif <- e.meanbefor-e.meanafter
e.dif <- e.meanbefore-e.meanafter
e.meandif <- mean(e.dif)
e.meandif
e.difsd <- sd(e.dif)
e.difsd
e.dif <- e.meanbefore-e.meanafter
e.dif <- exper[,1]-exper[,2]
e.meandif <- mean(e.dif)
e.meandif
e.difsd <- sd(e.dif)
e.difsd
## Question 1
n <- length(exper[,1])
e.difSE <- e.difsd/sqrt(n)
e.difSE
df <- n-1
df
c.meanbefore <- mean(control[,1])
ec.meandif <- e.meanbefore-c.meanbefore
ec.meandif
e.before <- exper[,1]
e.after <- exper[,2]
c.before <- control[,1]
c.after <- control[,2]
## Question 1
n.e <- length(exper[,1])
n.c <- length(control[,1])
rm(n)
e.residbefore <- e.before-e.meanbefore
c.residbefore <- c.before-c.meanbefore
length(exper)
width(exper)
size(exper)
dim(exper)
c(n.e, a) <- dim(exper)
n.e <- dim(exper)[1]
n.c <- dim(control)[1]
n.c
a <- dim(exper)[2]
N <- a*(n.e+n.c)
n.c <- dim(control)[1]
control <- read.table("~/Dropbox/School/2018W1/STAT_404/webwork/webwork1_stat404/control.txt", quote="\"", comment.char="")
n.e <- dim(exper)[1]
n.c <- dim(control)[1]
a <- dim(exper)[2]
N <- a*(n.e+n.c)
e.before <- exper[,1]
e.after <- exper[,2]
c.before <- control[,1]
c.after <- control[,2]
e.meanbefore <- mean(exper[,1])
e.meanafter <- mean(exper[,2])
c.meanbefore <- mean(control[,1])
c.meanafter <- mean(control[,2])
e.dif <- exper[,1]-exper[,2]
e.meandif <- mean(e.dif)
e.meandif
rm(list=ls())
## Question 1
exper <- read.table("~/Dropbox/School/2018W1/STAT_404/webwork/webwork1_stat404/exper.txt", quote="\"", comment.char="")
control <- read.table("~/Dropbox/School/2018W1/STAT_404/webwork/webwork1_stat404/control.txt", quote="\"", comment.char="")
n.e <- dim(exper)[1]
n.c <- dim(control)[1]
a <- dim(exper)[2]
N <- a*(n.e+n.c)
e.before <- exper[,1]
e.after <- exper[,2]
c.before <- control[,1]
c.after <- control[,2]
e.meanbefore <- mean(exper[,1])
e.meanafter <- mean(exper[,2])
c.meanbefore <- mean(control[,1])
c.meanafter <- mean(control[,2])
e.dif <- exper[,1]-exper[,2]
e.meandif <- mean(e.dif)
e.meandif
e.difsd <- sd(e.dif)
e.difSE <- e.difsd/sqrt(n)
e.difSE
e.difSE <- e.difsd/sqrt(n.e)
e.difSE
e.residbefore <- e.before-e.meanbefore
c.residbefore <- c.before-c.meanbefore
c.difsd <- sd(c.dif)
s2 <- ((sum(e.residbefore))^2 + (sum(c.residbefore))^2)/(N-a)
e.meanbefore-c.meanbefore
s2.before <- ((sum(e.residbefore))^2 + (sum(c.residbefore))^2)/(N-a)
ec.meanbefore <- e.meanbefore-c.meanbefore
ec.SEbefore <- sqrt(s2.before)*sqrt(1/n.e+1/n.c)
ec.SEbefore
df2 <- N-a
df2
c.dif <- control[,1]-control[,2]
c.meandif <- mean(c.dif)
c.meandif
# Part 1c
teststat.1c <- e.meandif - c.meandif
# Part 1c
e.residdif <- e.dif - e.meandif
c.residdif <- c.dif - c.meandif
# Part 1c
e.residdif <- e.dif - e.meandif
c.residdif <- c.dif - c.meandif
teststat.1c <- e.meandif - c.meandif
s2.ecdif <- ((sum(e.residdif))^2+(sum(c.residdif))^2)/(N-a)
teststat.1c
ec.SEdif <- sqrt(s2.ecdif)*sqrt(1/n.e+1/n.c)
ec.SEdif <- sqrt(s2.ecdif)*sqrt(1/n.e+1/n.c)
ec.SEdif
e.dif <- e.meanbefore - e.meanafter
e.meandif <- mean(e.dif)
e.meandif
e.meanafter-e.meanbefore
e.dif <- e.before - e.after
e.meandif <- mean(e.dif)
e.meandif
t.test(e.before, e.after, paired=TRUE)
t.test(e.after, e.before, paired=TRUE)
summary(t.test(e.after, e.before, paired=TRUE))
t.test(e.after, e.before, paired=TRUE)
e.dif <- e.after - e.before
e.difsd <- sd(e.dif)
e.difSE <- e.difsd/sqrt(n.e)
e.difSE
# 1b)
t.test(e.before, c.before, var.equal=TRUE)
# 1b)
test1b <- t.test(e.before, c.before, var.equal=TRUE)
meandif1b <- abs(23.30833-20.74545)
meandif1b
se1b <- (9.682032-meandif1b)/0.4624
se1b
e.dif <- e.after - e.before
c.dif <- c.after - c.before
e.meanbefore <- mean(exper[,1])
e.meanafter <- mean(exper[,2])
c.meanbefore <- mean(control[,1])
c.meanafter <- mean(control[,2])
e.dif <- e.after - e.before
e.meandif <- mean(e.dif)
e.meandif
c.dif <- c.after - c.before
c.meandif <- mean(c.dif)
c.meandif
e.difsd <- sd(e.dif)
c.difsd <- sd(c.dif)
# 1c)
test1c <- t.test(c.dif, e.dif, alternative="two.sided", var.equal = FALSE)
test1c
meandif1c <- abs(-0.2454545 - -3.0833333)
meandif1c
se1c <- (4.7266604-meandif1c)/3.2625
se1c
# 1b)
test1b <- t.test(e.before, c.before, var.equal=TRUE)
meandif1b
test1b
qt(c(.025, .975), df=21)
se1b <- (9.682032-meandif1b)/2.079614
se1b
dt(2.160369)
pt(2.160369)
pt(2.160369, 12)
pt(2.160369, 21)
qt(c(.025, .975), df=12)
qt(c(.025, .975), df=12.38)
test1c
se1c <- (4.7266604-meandif1c)/2.160369
se1c
train <- read.table("~/Dropbox/School/2018W1/STAT_406/Code/quiz1/training.txt", quote="\"", comment.char="")
test <- read.table("~/Dropbox/School/2018W1/STAT_406/Code/quiz1/testing.txt", quote="\"", comment.char="")
rm(list=ls())
train <- read.table("~/Dropbox/School/2018W1/STAT_406/Code/quiz1/training.txt", quote="\"", comment.char="")
test <- read.table("~/Dropbox/School/2018W1/STAT_406/Code/quiz1/testing.txt", quote="\"", comment.char="")
p <- ncol(train)
ncol(test)
View(train)
View(train)
train <- read.table("~/Dropbox/School/2018W1/STAT_406/Code/quiz1/training.txt", quote="\"", comment.char="", header = TRUE)
test <- read.table("~/Dropbox/School/2018W1/STAT_406/Code/quiz1/testing.txt", quote="\"", comment.char="", header = TRUE)
null <- lm(MORT~1, data=train)
full <- lm(MORT~., data=train)
cor(train)
cor(train)
cor(train)
cor(train)
cor(train)
cor(train)
cor(train)
reduced <- lm(MORT~POOR+HC+NOX+HOUS+NONW, data=train)
k <- 5
n <- nrow(train)+nrow(test)
pr.full <- pr.reduced <- rep(0, n)
pr.full <- predict(fulltrain, newdata=test)
pr.full <- pr.reduced <- rep(0, n)
n <- nrow(train)+nrow(test)
k <- 5
for (i in 1:k) {
fulltrain <- lm(MORT~., data=train)
reducedtrain <- lm(MORT~POOR+HC+NOX+HOUS+NONW, data=train)
pr.full <- predict(fulltrain, newdata=test)
pr.reduced <- predict(partialtrain, newdata=test)
}
mspe_full <- mean((train$MORT-pr.full)^2, (test$MORT-pr.full)^2)
mspe_full
mspe_reduced <- mspe_full <- mean((train$MORT-pr.reduced)^2, (test$MORT-pr.reduced)^2)
mspe_full
train <- read.table("~/Dropbox/School/2018W1/STAT_406/Code/quiz1/training.txt", quote="\"", comment.char="", header = TRUE)
test <- read.table("~/Dropbox/School/2018W1/STAT_406/Code/quiz1/testing.txt", quote="\"", comment.char="", header = TRUE)
# p <- ncol(train)
# nulltrain <- lm(MORT~1, data=train)
fulltrain <- lm(MORT~., data=train)
reducedtrain <- lm(MORT~POOR+HC+NOX+HOUS+NONW, data=train)
pr.full <- predict(fulltrain, newdata=test)
pr.reduced <- predict(reducedtrain,)
mspe_full <- mean((train$MORT-pr.full)^2, (test$MORT-pr.full)^2)
mspe_full
mspe_reduced <- mspe_full <- mean((train$MORT-pr.reduced)^2, (test$MORT-pr.reduced)^2)
mspe_full
train <- read.table("~/Dropbox/School/2018W1/STAT_406/Code/quiz1/training.txt", quote="\"", comment.char="", header = TRUE)
test <- read.table("~/Dropbox/School/2018W1/STAT_406/Code/quiz1/testing.txt", quote="\"", comment.char="", header = TRUE)
# p <- ncol(train)
# nulltrain <- lm(MORT~1, data=train)
fulltrain <- lm(MORT~., data=train)
reducedtrain <- lm(MORT~POOR+HC+NOX+HOUS+NONW, data=train)
pr.full <- predict(fulltrain, newdata=test)
pr.reduced <- predict(reducedtrain,)
mspe_full <- mean((train$MORT-pr.full)^2, (test$MORT-pr.full)^2)
data <- merge(train, test)
data <- merge(train, test, by.x)
data <- merge(train, test, by.x=TRUE)
data <- merge(train, test, by.y=TRUE)
data <- merge(train, test, by.y="all")
data <- merge(train, test, by.x="all")
# p <- ncol(train)
# nulltrain <- lm(MORT~1, data=train)
fulltrain <- lm(MORT~., data=train)
reducedtrain <- lm(MORT~POOR+HC+NOX+HOUS+NONW, data=train)
pr.full <- predict(fulltrain, newdata=test)
pr.reduced <- predict(reducedtrain,)
mspe_full <- mean((train$MORT-pr.full)^2, (test$MORT-pr.full)^2)
mspe_full <- mean((train$MORT-pr.full)^2)
pr.reduced <- predict(reducedtrain, newdata=test)
mspe_full <- mean((train$MORT-pr.full)^2, (test$MORT-pr.full)^2)
mspe_full
mspe_reduced <- mspe_full <- mean((train$MORT-pr.reduced)^2, (test$MORT-pr.reduced)^2)
mspe_full
mspe_reduced
mspe_full <- mean((train$MORT-pr.full)^2, (test$MORT-pr.full)^2)
mspe_full
mspe_reduced <- mean((train$MORT-pr.reduced)^2, (test$MORT-pr.reduced)^2)
mspe_reduced
mspe_full <- mean((train$MORT-pr.full)^2, (test$MORT-pr.full)^2)
mspe_full
mspe_reduced <- mean((train$MORT-pr.reduced)^2, (test$MORT-pr.reduced)^2)
mspe_reduced
rm(list=ls())
train <- read.table("~/Dropbox/School/2018W1/STAT_406/Code/quiz1/training.txt", quote="\"", comment.char="", header = TRUE)
test <- read.table("~/Dropbox/School/2018W1/STAT_406/Code/quiz1/testing.txt", quote="\"", comment.char="", header = TRUE)
# p <- ncol(train)
# nulltrain <- lm(MORT~1, data=train)
fulltrain <- lm(MORT~., data=train)
reducedtrain <- lm(MORT~POOR+HC+NOX+HOUS+NONW, data=train)
pr.full <- predict(fulltrain, newdata=test)
pr.reduced <- predict(reducedtrain, newdata=test)
mspe_full <- mean((train$MORT-pr.full)^2, (test$MORT-pr.full)^2)
mspe_full
mspe_reduced <- mean((train$MORT-pr.reduced)^2, (test$MORT-pr.reduced)^2)
mspe_full <- mean((test$MORT - pr.full)^2)
mspe_full
mspe_reduced <- mean((test$MORT - pr.reduced)^2)
mspe_reduced
cor(train)
cor(train)[16]
cor(train)[,16]
t(cor(train)[,16])
sort(cor(train)[,16])
reduced2 <- lm(MORT~NONW+PREC+SO+POPN+DENS, data=train)
pr.reduced2 <- predict(reduced2, newdata=test)
mspe_reduced2 <- mean((test$MORT - pr.reduced2)^2)
mspe_reduced2
reduced2 <- lm(MORT~NONW+PREC+SO+POPN, data=train)
pr.full <- predict(fulltrain, newdata=test)
pr.reduced <- predict(reducedtrain, newdata=test)
pr.reduced2 <- predict(reduced2, newdata=test)
mspe_full <- mean((test$MORT - pr.full)^2)
mspe_full
mspe_reduced <- mean((test$MORT - pr.reduced)^2)
mspe_reduced
mspe_reduced2 <- mean((test$MORT - pr.reduced2)^2)
mspe_reduced2
reduced2 <- lm(MORT~NONW+PREC+SO+POPN, data=train)
# pr.full <- predict(fulltrain, newdata=test)
# pr.reduced <- predict(reducedtrain, newdata=test)
pr.reduced2 <- predict(reduced2, newdata=test)
# mspe_full <- mean((test$MORT - pr.full)^2)
# mspe_full
# mspe_reduced <- mean((test$MORT - pr.reduced)^2)
# mspe_reduced
mspe_reduced2 <- mean((test$MORT - pr.reduced2)^2)
mspe_reduced2
reduced2 <- lm(MORT~NONW+PREC+SO, data=train)
# pr.full <- predict(fulltrain, newdata=test)
# pr.reduced <- predict(reducedtrain, newdata=test)
pr.reduced2 <- predict(reduced2, newdata=test)
# mspe_full <- mean((test$MORT - pr.full)^2)
# mspe_full
# mspe_reduced <- mean((test$MORT - pr.reduced)^2)
# mspe_reduced
mspe_reduced2 <- mean((test$MORT - pr.reduced2)^2)
mspe_reduced2
reduced2 <- lm(MORT~NONW+PREC, data=train)
# pr.full <- predict(fulltrain, newdata=test)
# pr.reduced <- predict(reducedtrain, newdata=test)
pr.reduced2 <- predict(reduced2, newdata=test)
# mspe_full <- mean((test$MORT - pr.full)^2)
# mspe_full
# mspe_reduced <- mean((test$MORT - pr.reduced)^2)
# mspe_reduced
mspe_reduced2 <- mean((test$MORT - pr.reduced2)^2)
mspe_reduced2
reduced2 <- lm(MORT~NONW+SO, data=train)
# pr.full <- predict(fulltrain, newdata=test)
# pr.reduced <- predict(reducedtrain, newdata=test)
pr.reduced2 <- predict(reduced2, newdata=test)
# mspe_full <- mean((test$MORT - pr.full)^2)
# mspe_full
# mspe_reduced <- mean((test$MORT - pr.reduced)^2)
# mspe_reduced
mspe_reduced2 <- mean((test$MORT - pr.reduced2)^2)
mspe_reduced2
reduced2 <- lm(MORT~NONW+PREC+POPN, data=train)
# pr.full <- predict(fulltrain, newdata=test)
# pr.reduced <- predict(reducedtrain, newdata=test)
pr.reduced2 <- predict(reduced2, newdata=test)
# mspe_full <- mean((test$MORT - pr.full)^2)
# mspe_full
# mspe_reduced <- mean((test$MORT - pr.reduced)^2)
# mspe_reduced
mspe_reduced2 <- mean((test$MORT - pr.reduced2)^2)
mspe_reduced2
reduced2 <- lm(MORT~NONW+PREC+DENS, data=train)
# pr.full <- predict(fulltrain, newdata=test)
# pr.reduced <- predict(reducedtrain, newdata=test)
pr.reduced2 <- predict(reduced2, newdata=test)
# mspe_full <- mean((test$MORT - pr.full)^2)
# mspe_full
# mspe_reduced <- mean((test$MORT - pr.reduced)^2)
# mspe_reduced
mspe_reduced2 <- mean((test$MORT - pr.reduced2)^2)
mspe_reduced2
reduced2 <- lm(MORT~NONW+PREC+SO, data=train)
# pr.full <- predict(fulltrain, newdata=test)
# pr.reduced <- predict(reducedtrain, newdata=test)
pr.reduced2 <- predict(reduced2, newdata=test)
# mspe_full <- mean((test$MORT - pr.full)^2)
# mspe_full
# mspe_reduced <- mean((test$MORT - pr.reduced)^2)
# mspe_reduced
mspe_reduced2 <- mean((test$MORT - pr.reduced2)^2)
mspe_reduced2
mspe_full
mspe_reduced
install.packages("agricolae")
library(agricolae)
###Here you should see around 5\% of replications have a F-statistic larger than
###the 95th percentile of the corresponding F distribution.
###Try more simulation cases with different inputs to understand
# the variability as sample sizes increase etc.
rm(list=ls())
library(MASS)
## Question 2
library(splines)
## Question 5
bs(data.tr$times, degree = 3, knots = kn1)
rm(list=ls())
setwd("/Users/markkopani/Dropbox/School/2018W1/STAT_406/Labs/lab4_stat406")
library(MASS)
## Question 1
dat.tr <- read.table("mcycle-1.train.txt", header = TRUE)
dat.test <- read.table("mcycle-1.test.txt", header = TRUE)
k <- 5; kn1 <- as.numeric(quantile(dat.tr$times, (1:k)/(k+1)))
k <- 10; kn2 <- as.numeric(quantile(dat.tr$times, (1:k)/(k+1)))
k <- 20; kn3 <- as.numeric(quantile(dat.tr$times, (1:k)/(k+1)))
rm(k)
## Question 2
library(splines)
# fit the regression models
fit1 <- lm(accel ~ bs(times, degree = 3, knots = kn1), data = dat.tr)
fit2 <- lm(accel ~ bs(times, degree = 3, knots = kn2), data = dat.tr)
fit3 <- lm(accel ~ bs(times, degree = 3, knots = kn3), data = dat.tr)
# make plots
predict1 <- lm(predict(fit1)[order(times)] ~ sort(times), data = dat.tr)
plot(accel ~ times, data = dat.tr, pch = 19, col = "gray", cex = 1.5)
lines(predict1, lwd = 6, col = "tomato3")
plot(accel ~ times, data = dat.tr, pch = 19, col = "gray", cex = 1.5)
lines(predict(fit2)[order(times)] ~ sort(times), data = dat.tr, lwd = 6, col = "tomato3")
plot(accel ~ times, data = dat.tr, pch = 19, col = "gray", cex = 1.5)
lines(predict(fit3)[order(times)] ~ sort(times), data = dat.tr, lwd = 6, col = "tomato3")
## Question 3
pr.fit1 <- pr.fit2 <- pr.fit3 <- rep(0, nrow(dat.test))
for (i in 1:nrow(dat.test)) {
pr.fit1[i] <- predict(fit1, newdata = dat.test)
pr.fit2[i] <- predict(fit2, newdata = dat.test)
pr.fit3[i] <- predict(fit3, newdata = dat.test)
}
mspe1 <- mean((dat.test$accel - pr.fit1)^2)
mspe2 <- mean((dat.test$accel - pr.fit2)^2)
mspe3 <- mean((dat.test$accel - pr.fit3)^2)
mspe1
mspe2
mspe3
## Question 5
bs(data.tr$times, degree = 3, knots = kn1)
## Question 5
bs(dat.tr$times, degree = 3, knots = kn1)
## Question 5
S1 = bs(dat.tr$times, degree = 3, knots = kn1)
trace(S1)
tr(S1)
## Question 5
library(psych)
matrix.trace(S1)
install.packages("psych")
## Question 5
library(psych)
S1 = bs(dat.tr$times, degree = 3, knots = kn1)
tr(S1)
matrix.trace(S1)
# matrix.trace(S1)
shape(S1)
# matrix.trace(S1)
dim(S1)
S2 = bs(dat.tr$times, degree = 3, knots = kn2)
S3 = bs(dat.tr$times, degree = 3, knots = kn3)
dim(S2)
dim(S3)
pr.fit1
for (i in 1:nrow(dat.test)) {
fit1 <- lm(accel ~ bs(times, degree = 3, knots = kn1), data = dat.tr)
fit2 <- lm(accel ~ bs(times, degree = 3, knots = kn2), data = dat.tr)
fit3 <- lm(accel ~ bs(times, degree = 3, knots = kn3), data = dat.tr)
pr.fit1[i] <- predict(fit1, newdata = dat.test)
pr.fit2[i] <- predict(fit2, newdata = dat.test)
pr.fit3[i] <- predict(fit3, newdata = dat.test)
}
mspe1 <- mean((dat.test$accel - pr.fit1)^2)
mspe2 <- mean((dat.test$accel - pr.fit2)^2)
mspe3 <- mean((dat.test$accel - pr.fit3)^2)
mspe1
mspe2
mspe3
install.packages("mosaic")
## Question 3
library(mosaic)
MSPE(predict1, data=dat.tr)
mosaic::MSPE(predict1, data=dat.tr)
mspe1 <- (dat.test$accel-predict.lm(fit1, data=dat.test))
mspe1 <- mean((dat.test$accel-predict.lm(fit1, data=dat.test))^2)
predict2 <- lm(predict(fit2)[order(times)] ~ sort(times), data = dat.tr)
predict3 <- lm(predict(fit3)[order(times)] ~ sort(times), data = dat.tr)
mspe2 <- mean((dat.test$accel-predict.lm(fit2, data=dat.test))^2)
mspe3 <- mean((dat.test$accel-predict.lm(fit3, data=dat.test))^2)
mspe1
mspe2
mspe3
pr.fit1
