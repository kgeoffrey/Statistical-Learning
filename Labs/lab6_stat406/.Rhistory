c.meanafter <- mean(control[,2])
e.dif <- e.after - e.before
e.meandif <- mean(e.dif)
e.meandif
c.dif <- c.after - c.before
c.meandif <- mean(c.dif)
c.meandif
e.difsd <- sd(e.dif)
c.difsd <- sd(c.dif)
# 1c)
test1c <- t.test(c.dif, e.dif, alternative="two.sided", var.equal = FALSE)
test1c
meandif1c <- abs(-0.2454545 - -3.0833333)
meandif1c
se1c <- (4.7266604-meandif1c)/3.2625
se1c
# 1b)
test1b <- t.test(e.before, c.before, var.equal=TRUE)
meandif1b
test1b
qt(c(.025, .975), df=21)
se1b <- (9.682032-meandif1b)/2.079614
se1b
dt(2.160369)
pt(2.160369)
pt(2.160369, 12)
pt(2.160369, 21)
qt(c(.025, .975), df=12)
qt(c(.025, .975), df=12.38)
test1c
se1c <- (4.7266604-meandif1c)/2.160369
se1c
train <- read.table("~/Dropbox/School/2018W1/STAT_406/Code/quiz1/training.txt", quote="\"", comment.char="")
test <- read.table("~/Dropbox/School/2018W1/STAT_406/Code/quiz1/testing.txt", quote="\"", comment.char="")
rm(list=ls())
train <- read.table("~/Dropbox/School/2018W1/STAT_406/Code/quiz1/training.txt", quote="\"", comment.char="")
test <- read.table("~/Dropbox/School/2018W1/STAT_406/Code/quiz1/testing.txt", quote="\"", comment.char="")
p <- ncol(train)
ncol(test)
View(train)
View(train)
train <- read.table("~/Dropbox/School/2018W1/STAT_406/Code/quiz1/training.txt", quote="\"", comment.char="", header = TRUE)
test <- read.table("~/Dropbox/School/2018W1/STAT_406/Code/quiz1/testing.txt", quote="\"", comment.char="", header = TRUE)
null <- lm(MORT~1, data=train)
full <- lm(MORT~., data=train)
cor(train)
cor(train)
cor(train)
cor(train)
cor(train)
cor(train)
cor(train)
reduced <- lm(MORT~POOR+HC+NOX+HOUS+NONW, data=train)
k <- 5
n <- nrow(train)+nrow(test)
pr.full <- pr.reduced <- rep(0, n)
pr.full <- predict(fulltrain, newdata=test)
pr.full <- pr.reduced <- rep(0, n)
n <- nrow(train)+nrow(test)
k <- 5
for (i in 1:k) {
fulltrain <- lm(MORT~., data=train)
reducedtrain <- lm(MORT~POOR+HC+NOX+HOUS+NONW, data=train)
pr.full <- predict(fulltrain, newdata=test)
pr.reduced <- predict(partialtrain, newdata=test)
}
mspe_full <- mean((train$MORT-pr.full)^2, (test$MORT-pr.full)^2)
mspe_full
mspe_reduced <- mspe_full <- mean((train$MORT-pr.reduced)^2, (test$MORT-pr.reduced)^2)
mspe_full
train <- read.table("~/Dropbox/School/2018W1/STAT_406/Code/quiz1/training.txt", quote="\"", comment.char="", header = TRUE)
test <- read.table("~/Dropbox/School/2018W1/STAT_406/Code/quiz1/testing.txt", quote="\"", comment.char="", header = TRUE)
# p <- ncol(train)
# nulltrain <- lm(MORT~1, data=train)
fulltrain <- lm(MORT~., data=train)
reducedtrain <- lm(MORT~POOR+HC+NOX+HOUS+NONW, data=train)
pr.full <- predict(fulltrain, newdata=test)
pr.reduced <- predict(reducedtrain,)
mspe_full <- mean((train$MORT-pr.full)^2, (test$MORT-pr.full)^2)
mspe_full
mspe_reduced <- mspe_full <- mean((train$MORT-pr.reduced)^2, (test$MORT-pr.reduced)^2)
mspe_full
train <- read.table("~/Dropbox/School/2018W1/STAT_406/Code/quiz1/training.txt", quote="\"", comment.char="", header = TRUE)
test <- read.table("~/Dropbox/School/2018W1/STAT_406/Code/quiz1/testing.txt", quote="\"", comment.char="", header = TRUE)
# p <- ncol(train)
# nulltrain <- lm(MORT~1, data=train)
fulltrain <- lm(MORT~., data=train)
reducedtrain <- lm(MORT~POOR+HC+NOX+HOUS+NONW, data=train)
pr.full <- predict(fulltrain, newdata=test)
pr.reduced <- predict(reducedtrain,)
mspe_full <- mean((train$MORT-pr.full)^2, (test$MORT-pr.full)^2)
data <- merge(train, test)
data <- merge(train, test, by.x)
data <- merge(train, test, by.x=TRUE)
data <- merge(train, test, by.y=TRUE)
data <- merge(train, test, by.y="all")
data <- merge(train, test, by.x="all")
# p <- ncol(train)
# nulltrain <- lm(MORT~1, data=train)
fulltrain <- lm(MORT~., data=train)
reducedtrain <- lm(MORT~POOR+HC+NOX+HOUS+NONW, data=train)
pr.full <- predict(fulltrain, newdata=test)
pr.reduced <- predict(reducedtrain,)
mspe_full <- mean((train$MORT-pr.full)^2, (test$MORT-pr.full)^2)
mspe_full <- mean((train$MORT-pr.full)^2)
pr.reduced <- predict(reducedtrain, newdata=test)
mspe_full <- mean((train$MORT-pr.full)^2, (test$MORT-pr.full)^2)
mspe_full
mspe_reduced <- mspe_full <- mean((train$MORT-pr.reduced)^2, (test$MORT-pr.reduced)^2)
mspe_full
mspe_reduced
mspe_full <- mean((train$MORT-pr.full)^2, (test$MORT-pr.full)^2)
mspe_full
mspe_reduced <- mean((train$MORT-pr.reduced)^2, (test$MORT-pr.reduced)^2)
mspe_reduced
mspe_full <- mean((train$MORT-pr.full)^2, (test$MORT-pr.full)^2)
mspe_full
mspe_reduced <- mean((train$MORT-pr.reduced)^2, (test$MORT-pr.reduced)^2)
mspe_reduced
rm(list=ls())
train <- read.table("~/Dropbox/School/2018W1/STAT_406/Code/quiz1/training.txt", quote="\"", comment.char="", header = TRUE)
test <- read.table("~/Dropbox/School/2018W1/STAT_406/Code/quiz1/testing.txt", quote="\"", comment.char="", header = TRUE)
# p <- ncol(train)
# nulltrain <- lm(MORT~1, data=train)
fulltrain <- lm(MORT~., data=train)
reducedtrain <- lm(MORT~POOR+HC+NOX+HOUS+NONW, data=train)
pr.full <- predict(fulltrain, newdata=test)
pr.reduced <- predict(reducedtrain, newdata=test)
mspe_full <- mean((train$MORT-pr.full)^2, (test$MORT-pr.full)^2)
mspe_full
mspe_reduced <- mean((train$MORT-pr.reduced)^2, (test$MORT-pr.reduced)^2)
mspe_full <- mean((test$MORT - pr.full)^2)
mspe_full
mspe_reduced <- mean((test$MORT - pr.reduced)^2)
mspe_reduced
cor(train)
cor(train)[16]
cor(train)[,16]
t(cor(train)[,16])
sort(cor(train)[,16])
reduced2 <- lm(MORT~NONW+PREC+SO+POPN+DENS, data=train)
pr.reduced2 <- predict(reduced2, newdata=test)
mspe_reduced2 <- mean((test$MORT - pr.reduced2)^2)
mspe_reduced2
reduced2 <- lm(MORT~NONW+PREC+SO+POPN, data=train)
pr.full <- predict(fulltrain, newdata=test)
pr.reduced <- predict(reducedtrain, newdata=test)
pr.reduced2 <- predict(reduced2, newdata=test)
mspe_full <- mean((test$MORT - pr.full)^2)
mspe_full
mspe_reduced <- mean((test$MORT - pr.reduced)^2)
mspe_reduced
mspe_reduced2 <- mean((test$MORT - pr.reduced2)^2)
mspe_reduced2
reduced2 <- lm(MORT~NONW+PREC+SO+POPN, data=train)
# pr.full <- predict(fulltrain, newdata=test)
# pr.reduced <- predict(reducedtrain, newdata=test)
pr.reduced2 <- predict(reduced2, newdata=test)
# mspe_full <- mean((test$MORT - pr.full)^2)
# mspe_full
# mspe_reduced <- mean((test$MORT - pr.reduced)^2)
# mspe_reduced
mspe_reduced2 <- mean((test$MORT - pr.reduced2)^2)
mspe_reduced2
reduced2 <- lm(MORT~NONW+PREC+SO, data=train)
# pr.full <- predict(fulltrain, newdata=test)
# pr.reduced <- predict(reducedtrain, newdata=test)
pr.reduced2 <- predict(reduced2, newdata=test)
# mspe_full <- mean((test$MORT - pr.full)^2)
# mspe_full
# mspe_reduced <- mean((test$MORT - pr.reduced)^2)
# mspe_reduced
mspe_reduced2 <- mean((test$MORT - pr.reduced2)^2)
mspe_reduced2
reduced2 <- lm(MORT~NONW+PREC, data=train)
# pr.full <- predict(fulltrain, newdata=test)
# pr.reduced <- predict(reducedtrain, newdata=test)
pr.reduced2 <- predict(reduced2, newdata=test)
# mspe_full <- mean((test$MORT - pr.full)^2)
# mspe_full
# mspe_reduced <- mean((test$MORT - pr.reduced)^2)
# mspe_reduced
mspe_reduced2 <- mean((test$MORT - pr.reduced2)^2)
mspe_reduced2
reduced2 <- lm(MORT~NONW+SO, data=train)
# pr.full <- predict(fulltrain, newdata=test)
# pr.reduced <- predict(reducedtrain, newdata=test)
pr.reduced2 <- predict(reduced2, newdata=test)
# mspe_full <- mean((test$MORT - pr.full)^2)
# mspe_full
# mspe_reduced <- mean((test$MORT - pr.reduced)^2)
# mspe_reduced
mspe_reduced2 <- mean((test$MORT - pr.reduced2)^2)
mspe_reduced2
reduced2 <- lm(MORT~NONW+PREC+POPN, data=train)
# pr.full <- predict(fulltrain, newdata=test)
# pr.reduced <- predict(reducedtrain, newdata=test)
pr.reduced2 <- predict(reduced2, newdata=test)
# mspe_full <- mean((test$MORT - pr.full)^2)
# mspe_full
# mspe_reduced <- mean((test$MORT - pr.reduced)^2)
# mspe_reduced
mspe_reduced2 <- mean((test$MORT - pr.reduced2)^2)
mspe_reduced2
reduced2 <- lm(MORT~NONW+PREC+DENS, data=train)
# pr.full <- predict(fulltrain, newdata=test)
# pr.reduced <- predict(reducedtrain, newdata=test)
pr.reduced2 <- predict(reduced2, newdata=test)
# mspe_full <- mean((test$MORT - pr.full)^2)
# mspe_full
# mspe_reduced <- mean((test$MORT - pr.reduced)^2)
# mspe_reduced
mspe_reduced2 <- mean((test$MORT - pr.reduced2)^2)
mspe_reduced2
reduced2 <- lm(MORT~NONW+PREC+SO, data=train)
# pr.full <- predict(fulltrain, newdata=test)
# pr.reduced <- predict(reducedtrain, newdata=test)
pr.reduced2 <- predict(reduced2, newdata=test)
# mspe_full <- mean((test$MORT - pr.full)^2)
# mspe_full
# mspe_reduced <- mean((test$MORT - pr.reduced)^2)
# mspe_reduced
mspe_reduced2 <- mean((test$MORT - pr.reduced2)^2)
mspe_reduced2
mspe_full
mspe_reduced
install.packages("agricolae")
library(agricolae)
###Here you should see around 5\% of replications have a F-statistic larger than
###the 95th percentile of the corresponding F distribution.
###Try more simulation cases with different inputs to understand
# the variability as sample sizes increase etc.
rm(list=ls())
y1 <- runif(n = 20, min = 1, max = 50)
y2 <- runif(n = 20, min = 1, max = 50)
y3 <- runif(n = 20, min = 1, max = 50)
Y <- matrix(c(y1, y2, y3), ncol = 3, nrow = 20)
View(Y)
a <- 3
b <- 20
ybar_iplus <- c(mean(y1), mean(y2), mean(y3))
ybar_plusj <- rep(0, 20)
for (i in 1:20) {
ybar_plusj[i] <- mean(y1[i], y2[i], y3[i])
}
a*b
ybar_plusplus <- (1/a*b)*sum(c(y1, y2, y3))
ybar_plusplus <- (1/(a*b))*sum(c(y1, y2, y3))
sum(y1-ybar_iplus[1])
sum(y2-ybar_iplus[2])
sum(y3-ybar_iplus[3])
sum(sum(ybar_iplus[1]-ybar_plusplus), sum(ybar_iplus[2]-ybar_plusplus), sum(ybar_iplus[3]-ybar_plusplus))
# a (FALSE)
summ <- 0
for (i in 1:a) {
for (j in 1:b) {
summ <- summ + (ybar_iplus[i] - ybar_plusplus)*(Y[j, i] - ybar_iplus[i])
}
}
# b (FALSE)
summ <- 0
for (i in 1:a) {
for (j in 1:b) {
summ <- summ + (ybar_plusj[j] - ybar_plusplus)*(Y[j, i] - ybar_plusj[j])
}
}
View(Y)
y1 <- runif(n = b, min = 1, max = 30)
y2 <- runif(n = b, min = 1, max = 30)
y3 <- runif(n = b, min = 1, max = 30)
Y <- matrix(c(y1, y2, y3), ncol = a, nrow = b)
ybar_iplus <- c(mean(y1), mean(y2), mean(y3))
ybar_plusj <- rep(0, b)
for (i in 1:b) {
ybar_plusj[i] <- mean(y1[i], y2[i], y3[i])
}
ybar_plusplus <- (1/(a*b))*sum(c(y1, y2, y3))
sum(y1-ybar_iplus[1])
sum(y2-ybar_iplus[2])
sum(y3-ybar_iplus[3])
sum(sum(ybar_iplus[1]-ybar_plusplus), sum(ybar_iplus[2]-ybar_plusplus), sum(ybar_iplus[3]-ybar_plusplus))
# a (FALSE)
summ <- 0
for (i in 1:a) {
for (j in 1:b) {
summ <- summ + (ybar_iplus[i] - ybar_plusplus)*(Y[j, i] - ybar_iplus[i])
}
}
# b (FALSE)
summ <- 0
for (i in 1:a) {
for (j in 1:b) {
summ <- summ + (ybar_plusj[j] - ybar_plusplus)*(Y[j, i] - ybar_plusj[j])
}
}
# c (TRUE)
summ1 <- 0
summ2 <- 0
for (i in 1:a) {
summ1 <- summ1 + sum(ybar_iplus[i]-ybar_plusplus)
for (j in 1:b) {
summ2 <- summ2 + sum(Y[j, i] - ybar_iplus[i])
}
}
summ1*summ2
mean <- c(1821, 1968, 1439, 616, 1354, 1424, 1694, 1669)
sd <- c(214, 435, 243, 205, 135, 191, 225, 551)
st1 <- c(51.28, 51.63, 51.06, 51.66, 52.2, 51.27, 52.31, 51.87)
st2 <- c(51,46, 51.15, 51.21, 51.07, 51.84, 51.46, 51.5, 50.99)
st3 <- c(51.07, 51.44, 50.91, 51.11, 50.77, 51.86, 51.22, 51.54)
st3 <- c(51.7, 51.69, 52.12, 51.23, 51.51, 52.02, 51.35, 51.36)
st3 <- c(51.07, 51.44, 50.91, 51.11, 50.77, 51.86, 51.22, 51.54)
st4 <- c(51.7, 51.69, 52.12, 51.23, 51.51, 52.02, 51.35, 51.36)
st5 <- c(51.82, 51.7, 51.25, 51.68, 51.76, 51.63, 51.61, 52.14)
st6 <- c(52.12, 52.29, 51.42, 51.88, 52, 51.84, 51.57, 51.74)
sampmeans <- c(51.66, 51.335, 51.24, 51.623, 51.699, 51.858)
rm(mean)
rm(sd)
yhat <- c(51.66, 51.335, 51.24, 51.623, 51.699, 51.858)
yhat_iplus <- c(51.66, 51.335, 51.24, 51.623, 51.699, 51.858)
rm(c(sampmeans, yhat))
rm(csampmeans, yhat)
rm(sampmeans, yhat)
s <- c(.45, .281, .357, .322, .247, .284)
data <- data.frame(c(st1, st2, st3, st4, st5, st6))
st2 <- c(51.46, 51.15, 51.21, 51.07, 51.84, 51.46, 51.5, 50.99)
data <- matrix(c(st1, st2, st3, st4, st5, st6), nrow = length(st1), ncol = 6)
View(data)
getwd()
boxplot(data)
anov <- aov(data = data)
y = c(st1, st2, st3, st4, st5, st6)
a <- 6
n <- length(st1)
N <- a*n
station <- rep(1:a, n)
station <- rep(1:a, times=n)
station <- rep(1:a, each=n)
data2 <- data.frame(station, y)
View(data2)
anov <- aov(y~factor(station), data=data2)
anovv <- anova(aov)
library(stats)
anovv <- anova(aov)
anov <- lm(y~factor(station), data=data2)
anovv <- anova(aov)
anov
data2 <- data.frame(y = y, group = factor(group))
data2 <- data.frame(y, factor(group))
data2 <- data.frame(y = y, group = factor(station))
anov <- lm(y~group, data=data2)
anovv <- anova(anov)
anovv
rm(list=ls())
HBSS <- c(7.2, 7.7, 8, 8.1, 8.3, 8.4, 8.4, 8.5, 8.6, 8.7, 9.1, 9.1, 9.8, 10.1, 10.3)
HBST <- c(8.1, 9.2, 10, 10.4, 10.6, 10.9, 11.1, 11.9, 12, 12.1)
HBSC <- c(10.7, 11.3, 11.5, 11.6, 11.7, 11.8, 12, 12.1, 12.3, 12.6, 12.6, 13.3, 13.3, 13.8, 13.9)
type <- rep(1:3, each=c(length(HBSS), length(HBST), length(HBSC)))
type <- c(rep(1, length(HBSS)), rep(2, length(HBST)), rep(3, length(HBSC)))
y <- c(HBSS, HBST, HBSC)
data <- data.frame(y = y, group = factor(type))
anov <- lm(y~group, data=data)
anova(anov)
boxplot(HBSS, HBST, HBSC)
1-pf(3.239, 3, 16)
1-pf(3.239, 3, 12)
1-pf(3.3, 3, 12)
1-pf(3.3, 3, 16)
1-pf(3.529, 2, 27)
A <- matrix(c(3, 1, 5, 1, 1, 2), nrow = 2, ncol = 3, byrow = TRUE)
A
rref(A)
install.packages("pracma")
library(pracma)
rref(A)
A <- matrix(c(3, 2, 1, 6, 5, -2, 2, 5, 2, -1, 1, 2), nrow = 3, ncol = 4, byrow = TRUE)
rref(A)
pracma::rref(A)
B <- matrix(c(-4, 1, 1, 1, 3, 0, 1, 3, 1, 3, 2, 8), nrow = 3, ncol = 4, byrow = TRUE)
pracma::rref(B)
rm(list=ls())
setwd("~/Dropbox/School/2018W1/STAT_406/Labs/lab6_stat406/")
read.table("Iris-1.txt", header=TRUE)
read.table("Iris-1.txt", header=TRUE, sep=",")
dat <- read.table("Iris-1.txt", header=TRUE, sep=",")
x1 <- dat$sepal
x2 <- dat$petal
y <- dat$y
plot(x1, x2, pch=c(19,1)[y+1], xlab="Sepal", ylab="Petal", xlim=c(3,8), ylim=c(3,8))
library(MASS)
x.sepal <- lda(x1)
x.sepal <- lda(y ~ sepal + petal, data = dat)
a.lda <- lda(y ~ sepal + petal, data = dat)
rm(x.sepal)
x.sepal <- seq(0, 4, length=200)
x.petal <- seq(0, 4, length=200)
the.grid <- expand.grid(x.sepal, x.petal)
names(the.grid) <- c("Sepal", "Petal")
pr.lda <- predict(a.lda, newdata=the.grid)$posterior
# x.sepal <- seq(0, 4, length=200)
# x.petal <- seq(0, 4, length=200)
the.grid <- expand.grid(x1, x2)
names(the.grid) <- c("Sepal", "Petal")
rm(x.petal, x.sepal)
x.sepal <- seq(0, 4, length=200)
x.petal <- seq(0, 4, length=200)
x.petal
x.sepal <- seq(0, 4, length=100)
x.petal <- seq(0, 4, length=100)
min(x1)
max(x2)
x.sepal <- seq(3, 8, length=100)
x.petal <- seq(3, 8, length=100)
the.grid <- expand.grid(x1, x2)
names(the.grid) <- c("Sepal", "Petal")
pr.lda <- predict(a.lda, newdata=the.grid)$posterior
a.lda <- lda(y ~ sepal + petal, data = dat)
pr.lda <- predict(a.lda, newdata=the.grid)$posterior
a.lda <- lda(dat$y ~ dat$sepal + dat$petal)
pr.lda <- predict(a.lda, newdata=the.grid)$posterior
x.sepal <- seq(3, 8, length=100)
x.petal <- seq(3, 8, length=100)
the.grid <- expand.grid(x1, x2)
names(the.grid) <- c("Sepal", "Petal")
pr.lda <- predict(a.lda, newdata=the.grid)$posterior
View(the.grid)
pr.lda <- predict(a.lda, newdata=the.grid)$posterior
names(the.grid) <- c("sepal", "petal")
pr.lda <- predict(a.lda, newdata=the.grid)$posterior
contour(x.sepal, x.petal, matrix(pr.lda, the.grid, the.grid), levels=.5, add=TRUE, drawlabels=FALSE, lwd=4, col'maroon')
contour(x.sepal, x.petal, matrix(pr.lda, the.grid, the.grid), levels=.5, add=TRUE, drawlabels=FALSE, lwd=4, col='maroon')
contour(x.sepal, x.petal, matrix(pr.lda, 100, 100), levels=.5, add=TRUE, drawlabels=FALSE, lwd=4, col='maroon')
contour(x.sepal, x.petal, matrix(pr.lda[,2], 100, 100), levels=.5, add=TRUE, drawlabels=FALSE, lwd=4, col='maroon')
contour("sepal", "petal", matrix(pr.lda, 200, 200),
levels = .5, add = TRUE, drawlabels = FALSE, lwd=4, col='maroon')
pr.lda <- predict(a.lda, newdata=the.grid)$posterior
contour("sepal", "petal", matrix(pr.lda, 200, 200),
levels = .5, add = TRUE, drawlabels = FALSE, lwd=4, col='maroon')
image(x.sepal, x.petal, matrix(pr.lda[, 2], 200, 200), col=terrain.colors(100), ylab='sepal', xlab='petal', main='LDA')
points(petal ~ sepal, data=data, pch=19, cex=1.5,col=c('red', 'blue')[y+1])
contour("sepal", "petal", matrix(pr.lda, 200, 200),
levels = .5, add = TRUE, drawlabels = FALSE, lwd=4, col='maroon')
points(petal ~ sepal, data=dat, pch=19, cex=1.5,col=c('red', 'blue')[y+1])
contour("sepal", "petal", matrix(pr.lda, 200, 200),
levels = .5, add = TRUE, drawlabels = FALSE, lwd=4, col='maroon')
contour(x.sepal, x.petal, matrix(pr.lda, 200, 200),
levels = .5, add = TRUE, drawlabels = FALSE, lwd=4, col='maroon')
image(x.sepal, x.petal, matrix(pr.lda[, 2], 200, 200), col=terrain.colors(100), ylab='sepal', xlab='petal', main='LDA')
points(petal ~ sepal, data=dat, pch=19, cex=1.5,col=c('red', 'blue')[y+1])
contour(x.sepal, x.petal, matrix(pr.lda, 200, 200),
levels = .5, add = TRUE, drawlabels = FALSE, lwd=4, col='maroon')
image(x.sepal, x.petal, matrix(pr.lda[, 2], 200, 200), col=terrain.colors(100), ylab='sepal', xlab='petal', main='LDA')
points(petal ~ sepal, data=dat, pch=19, cex=1.5,col=c('red', 'blue')[y+1])
image(x.sepal, x.petal, matrix(pr.lda[, 2], 200, 200), col=terrain.colors(100), ylab='sepal', xlab='petal', main='LDA')
image(x.sepal, x.petal, matrix(pr.lda[, 2], 100, 100), col=terrain.colors(100), ylab='sepal', xlab='petal', main='LDA')
points(petal ~ sepal, data=dat, pch=19, cex=1.5,col=c('red', 'blue')[y+1])
contour(x.sepal, x.petal, matrix(pr.lda, 100, 100),
levels = .5, add = TRUE, drawlabels = FALSE, lwd=4, col='maroon')
image(x.sepal, x.petal, matrix(pr.lda[, 2], 100, 100), col=terrain.colors(100), ylab='sepal', xlab='petal', main='LDA')
points(petal ~ sepal, data=dat, pch=19, cex=1.5,col=c('red', 'blue')[y+1])
# Q3
x1new <- c(4.9, 5.3)
x2new <- c(5.9, 4.8)
image(x.sepal, x.petal, matrix(pr.lda[, 2], 100, 100), col=terrain.colors(50), ylab='sepal', xlab='petal', main='LDA')
image(x.sepal, x.petal, matrix(pr.lda[, 2], 100, 100), col=terrain.colors(100), ylab='sepal', xlab='petal', main='LDA')
new.grid <- matrix(c(x1new, x2new), nrow = 2, ncol = 2)
new.g
new.grid
new.grid <- matrix(c(x1new, x2new), nrow = 2, ncol = 2, byrow = T)
new.grid
a <- glm(y~., data=dat, family=binomial)
pr <- predict(a, newdata=new.grid, type='response')
new.grid <- as.data.frame(new.grid)
pr <- predict(a, newdata=new.grid, type='response')
new.grid <- as.data.frame(new.grid, col.names=c("sepal", "petal"))
a <- glm(y~., data=dat, family=binomial)
pr <- predict(a, newdata=new.grid, type='response')
new.grid
new.grid <- as.data.frame(new.grid, col.names=c("sepal", "petal"))
new.grid
new.grid <- as.data.frame(new.grid)
colnames(new.grid) <- c("sepal", "petal")
new.grid
a <- glm(y~., data=dat, family=binomial)
pr <- predict(a, newdata=new.grid, type='response')
pr
1-pr
# a <- glm(y~., data=dat, family=binomial)
pr <- predict(a.lda, newdata=new.grid, type='response')$posterior
1-pr
# a <- glm(y~., data=dat, family=binomial)
pr <- predict(a.lda, newdata=new.grid, type='response')$posterior
1-pr
new.grid
# a <- glm(y~., data=dat, family=binomial)
pr <- predict(a.lda, newdata=new.grid)$posterior
pr
# Q3
sepal <- c(4.9, 5.3)
petal <- c(5.9, 4.8)
new.grid <- matrix(c(x1new, x2new), nrow = 2, ncol = 2, byrow = T)
new.grid <- as.data.frame(new.grid)
colnames(new.grid) <- c("sepal", "petal")
new.grid
pr <- predict(a.lda, newdata=new.grid)$posterior
pr
dat.te <- data.grame(sepal, petal)
dat.te <- data.grame(sepal, petal)
predict(a.lda, newdata = dat.te)$posterior
dat.te <- data.grame(sepal, petal)
dat.te <- data.frame(sepal, petal)
predict(a.lda, newdata = dat.te)$posterior
